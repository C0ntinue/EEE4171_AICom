{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "project1_20181485_20181573.ipynb의 사본",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/C0ntinue/EEE4171_AICom/blob/main/project1_60000_test\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VpI2TObHCD1o",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c124b808-f552-4516-8ef4-d0c2d3be3c3f"
      },
      "source": [
        "from google.colab import drive\n",
        "\n",
        "drive.mount('/content/gdrive')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MtTFRC3B48VK"
      },
      "source": [
        "pj_root= '/content/gdrive/MyDrive/Data/서강전자7학기/인공지능통신/pj/'"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wc2DwJn2y1tL"
      },
      "source": [
        "# import dependency\n",
        "import torch\n",
        "import torchvision\n",
        "import torchvision.transforms as transforms\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "import torch.optim as optim\n",
        "import matplotlib.pyplot as plt\n",
        "import time # 학습에 걸리는 시간\n",
        "import random # random seed 고정\n",
        "from datetime import datetime\n",
        "import os\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "from torch.autograd import Variable\n",
        "import torch.nn.functional as F\n",
        "from torch.utils.data.sampler import SubsetRandomSampler\n",
        "\n",
        "import torchvision\n",
        "import torchvision.transforms as transforms\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "from sklearn.model_selection import KFold\n",
        "\n",
        "from math import floor"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A5SJM4cW3sW0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "59ff5a0a-b219-4f6e-c342-3fb95513ba86"
      },
      "source": [
        "# GPU type\n",
        "!nvidia-smi\n",
        "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Sun May  9 04:33:43 2021       \n",
            "+-----------------------------------------------------------------------------+\n",
            "| NVIDIA-SMI 465.19.01    Driver Version: 460.32.03    CUDA Version: 11.2     |\n",
            "|-------------------------------+----------------------+----------------------+\n",
            "| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n",
            "| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n",
            "|                               |                      |               MIG M. |\n",
            "|===============================+======================+======================|\n",
            "|   0  Tesla T4            Off  | 00000000:00:04.0 Off |                    0 |\n",
            "| N/A   42C    P8    10W /  70W |      3MiB / 15109MiB |      0%      Default |\n",
            "|                               |                      |                  N/A |\n",
            "+-------------------------------+----------------------+----------------------+\n",
            "                                                                               \n",
            "+-----------------------------------------------------------------------------+\n",
            "| Processes:                                                                  |\n",
            "|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n",
            "|        ID   ID                                                   Usage      |\n",
            "|=============================================================================|\n",
            "|  No running processes found                                                 |\n",
            "+-----------------------------------------------------------------------------+\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Lwk-1LUlBP_e"
      },
      "source": [
        "# set hyperparmeters\n",
        "num_epochs = 100\n",
        "batch_size = 100\n",
        "learning_rate = 0.001\n",
        "k_folds = 10\n",
        "dropout = 0.25"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I0AatmO4Nx7C"
      },
      "source": [
        "# class design"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 439
        },
        "id": "4ZCDR6WNQjXo",
        "outputId": "ab3b79c9-4f9e-4bd0-932b-3765be69095a"
      },
      "source": [
        "# upload data\n",
        "# 1st col : data number\n",
        "# 2nd col : data label(0~9)\n",
        "# 3~end   : pixel values\n",
        "train_csv = pd.read_csv(pj_root+\"AIcomm_project_1_train.csv\", index_col = 0)\n",
        "train_csv"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>label</th>\n",
              "      <th>pixel1</th>\n",
              "      <th>pixel2</th>\n",
              "      <th>pixel3</th>\n",
              "      <th>pixel4</th>\n",
              "      <th>pixel5</th>\n",
              "      <th>pixel6</th>\n",
              "      <th>pixel7</th>\n",
              "      <th>pixel8</th>\n",
              "      <th>pixel9</th>\n",
              "      <th>pixel10</th>\n",
              "      <th>pixel11</th>\n",
              "      <th>pixel12</th>\n",
              "      <th>pixel13</th>\n",
              "      <th>pixel14</th>\n",
              "      <th>pixel15</th>\n",
              "      <th>pixel16</th>\n",
              "      <th>pixel17</th>\n",
              "      <th>pixel18</th>\n",
              "      <th>pixel19</th>\n",
              "      <th>pixel20</th>\n",
              "      <th>pixel21</th>\n",
              "      <th>pixel22</th>\n",
              "      <th>pixel23</th>\n",
              "      <th>pixel24</th>\n",
              "      <th>pixel25</th>\n",
              "      <th>pixel26</th>\n",
              "      <th>pixel27</th>\n",
              "      <th>pixel28</th>\n",
              "      <th>pixel29</th>\n",
              "      <th>pixel30</th>\n",
              "      <th>pixel31</th>\n",
              "      <th>pixel32</th>\n",
              "      <th>pixel33</th>\n",
              "      <th>pixel34</th>\n",
              "      <th>pixel35</th>\n",
              "      <th>pixel36</th>\n",
              "      <th>pixel37</th>\n",
              "      <th>pixel38</th>\n",
              "      <th>pixel39</th>\n",
              "      <th>...</th>\n",
              "      <th>pixel745</th>\n",
              "      <th>pixel746</th>\n",
              "      <th>pixel747</th>\n",
              "      <th>pixel748</th>\n",
              "      <th>pixel749</th>\n",
              "      <th>pixel750</th>\n",
              "      <th>pixel751</th>\n",
              "      <th>pixel752</th>\n",
              "      <th>pixel753</th>\n",
              "      <th>pixel754</th>\n",
              "      <th>pixel755</th>\n",
              "      <th>pixel756</th>\n",
              "      <th>pixel757</th>\n",
              "      <th>pixel758</th>\n",
              "      <th>pixel759</th>\n",
              "      <th>pixel760</th>\n",
              "      <th>pixel761</th>\n",
              "      <th>pixel762</th>\n",
              "      <th>pixel763</th>\n",
              "      <th>pixel764</th>\n",
              "      <th>pixel765</th>\n",
              "      <th>pixel766</th>\n",
              "      <th>pixel767</th>\n",
              "      <th>pixel768</th>\n",
              "      <th>pixel769</th>\n",
              "      <th>pixel770</th>\n",
              "      <th>pixel771</th>\n",
              "      <th>pixel772</th>\n",
              "      <th>pixel773</th>\n",
              "      <th>pixel774</th>\n",
              "      <th>pixel775</th>\n",
              "      <th>pixel776</th>\n",
              "      <th>pixel777</th>\n",
              "      <th>pixel778</th>\n",
              "      <th>pixel779</th>\n",
              "      <th>pixel780</th>\n",
              "      <th>pixel781</th>\n",
              "      <th>pixel782</th>\n",
              "      <th>pixel783</th>\n",
              "      <th>pixel784</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>50</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>50</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>235</td>\n",
              "      <td>255</td>\n",
              "      <td>86</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>17</td>\n",
              "      <td>158</td>\n",
              "      <td>70</td>\n",
              "      <td>107</td>\n",
              "      <td>247</td>\n",
              "      <td>185</td>\n",
              "      <td>120</td>\n",
              "      <td>130</td>\n",
              "      <td>112</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>200</td>\n",
              "      <td>183</td>\n",
              "      <td>146</td>\n",
              "      <td>193</td>\n",
              "      <td>217</td>\n",
              "      <td>68</td>\n",
              "      <td>129</td>\n",
              "      <td>108</td>\n",
              "      <td>88</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>193</td>\n",
              "      <td>...</td>\n",
              "      <td>227</td>\n",
              "      <td>176</td>\n",
              "      <td>51</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>176</td>\n",
              "      <td>214</td>\n",
              "      <td>91</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>200</td>\n",
              "      <td>153</td>\n",
              "      <td>44</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59995</th>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59996</th>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>60</td>\n",
              "      <td>105</td>\n",
              "      <td>131</td>\n",
              "      <td>151</td>\n",
              "      <td>161</td>\n",
              "      <td>171</td>\n",
              "      <td>156</td>\n",
              "      <td>109</td>\n",
              "      <td>16</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>60</td>\n",
              "      <td>199</td>\n",
              "      <td>215</td>\n",
              "      <td>...</td>\n",
              "      <td>226</td>\n",
              "      <td>222</td>\n",
              "      <td>221</td>\n",
              "      <td>255</td>\n",
              "      <td>201</td>\n",
              "      <td>91</td>\n",
              "      <td>247</td>\n",
              "      <td>221</td>\n",
              "      <td>189</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>75</td>\n",
              "      <td>175</td>\n",
              "      <td>195</td>\n",
              "      <td>63</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>18</td>\n",
              "      <td>19</td>\n",
              "      <td>13</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>142</td>\n",
              "      <td>120</td>\n",
              "      <td>32</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59997</th>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>59</td>\n",
              "      <td>228</td>\n",
              "      <td>219</td>\n",
              "      <td>242</td>\n",
              "      <td>219</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>31</td>\n",
              "      <td>24</td>\n",
              "      <td>20</td>\n",
              "      <td>22</td>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>118</td>\n",
              "      <td>0</td>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>82</td>\n",
              "      <td>13</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>18</td>\n",
              "      <td>22</td>\n",
              "      <td>18</td>\n",
              "      <td>31</td>\n",
              "      <td>32</td>\n",
              "      <td>16</td>\n",
              "      <td>22</td>\n",
              "      <td>21</td>\n",
              "      <td>18</td>\n",
              "      <td>13</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>95</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59998</th>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>192</td>\n",
              "      <td>206</td>\n",
              "      <td>200</td>\n",
              "      <td>214</td>\n",
              "      <td>179</td>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>82</td>\n",
              "      <td>212</td>\n",
              "      <td>...</td>\n",
              "      <td>121</td>\n",
              "      <td>123</td>\n",
              "      <td>98</td>\n",
              "      <td>151</td>\n",
              "      <td>0</td>\n",
              "      <td>136</td>\n",
              "      <td>247</td>\n",
              "      <td>233</td>\n",
              "      <td>145</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>24</td>\n",
              "      <td>114</td>\n",
              "      <td>141</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>24</td>\n",
              "      <td>84</td>\n",
              "      <td>85</td>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59999</th>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>60000 rows × 785 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "       label  pixel1  pixel2  pixel3  ...  pixel781  pixel782  pixel783  pixel784\n",
              "0          7       0       0       0  ...         0         0         0         0\n",
              "1          9       0       0       0  ...         0         0         0         0\n",
              "2          3       0       0       0  ...         0         0         0         0\n",
              "3          5       0       0       0  ...         0         0         0         0\n",
              "4          1       0       0       0  ...         0         0         0         0\n",
              "...      ...     ...     ...     ...  ...       ...       ...       ...       ...\n",
              "59995      8       0       0       0  ...         0         0         0         0\n",
              "59996      4       0       0       0  ...        32         0         0         0\n",
              "59997      6       0       0       0  ...         9         0         0         0\n",
              "59998      6       0       0       0  ...        31         0         0         0\n",
              "59999      7       0       0       0  ...         0         0         0         0\n",
              "\n",
              "[60000 rows x 785 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6cMxLTQUzKx4"
      },
      "source": [
        "class FashionDataset(Dataset):\n",
        "    \"\"\"User defined class to build a datset using Pytorch class Dataset.\"\"\"\n",
        "    \n",
        "    def __init__(self, data, transform = None):\n",
        "        \"\"\"Method to initilaize variables.\"\"\" \n",
        "        self.fashion_MNIST = list(data.values)\n",
        "        self.transform = transform\n",
        "        \n",
        "        label = []\n",
        "        image = []\n",
        "        \n",
        "        for i in self.fashion_MNIST:\n",
        "             # first column is of labels.\n",
        "            label.append(i[0])\n",
        "            image.append(i[1:])\n",
        "        self.labels = np.asarray(label)\n",
        "        # Dimension of Images = 28 * 28 * 1. where height = width = 28 and color_channels = 1.\n",
        "        self.images = np.asarray(image).reshape(-1, 28, 28, 1).astype('float32')\n",
        "\n",
        "    def __getitem__(self, index):\n",
        "        label = self.labels[index]\n",
        "        image = self.images[index]\n",
        "        \n",
        "        if self.transform is not None:\n",
        "            image = self.transform(image)\n",
        "\n",
        "        return image, label\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.images)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KML_PsZUJ0VQ"
      },
      "source": [
        "def output_label(label):\n",
        "    output_mapping = {\n",
        "                 0: \"T-shirt/Top\",\n",
        "                 1: \"Trouser\",\n",
        "                 2: \"Pullover\",\n",
        "                 3: \"Dress\",\n",
        "                 4: \"Coat\", \n",
        "                 5: \"Sandal\", \n",
        "                 6: \"Shirt\",\n",
        "                 7: \"Sneaker\",\n",
        "                 8: \"Bag\",\n",
        "                 9: \"Ankle Boot\"\n",
        "                 }\n",
        "    input = (label.item() if type(label) == torch.Tensor else label)\n",
        "    return output_mapping[input]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mJpiw5TwbAOX"
      },
      "source": [
        "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
        "\n",
        "my_path = os.getcwd()\n",
        "\n",
        "num_classes = 10\n",
        "\n",
        "learning_rate = 0.001\n",
        "\n",
        "transform_train = transforms.Compose([transforms.ToTensor(),\n",
        "  #                                       transforms.ColorJitter(brightness=0.1, contrast=0.1, saturation= 0.1),\n",
        "  #                                       transforms.RandomAffine(10, shear=10, scale=(0.9,1.1)),\n",
        "                                        transforms.RandomErasing(p=1)])#, transforms.Normalize((0.011153135, 0.03472079, 0.048551384, 0.07910808, 0.14255448, 0.21038567, 0.25234732, 0.28055963, 0.3307004, 0.39365456, 0.44600338, 0.46780568, 0.47594306, 0.46123105, 0.45222405, 0.48629662, 0.49890196, 0.48788238, 0.45848757, 0.39965674, 0.34338284, 0.31598544, 0.28804013, 0.23569258, 0.1702246, 0.12777059, 0.09138662, 0.022000086),(0.066316985, 0.14669645, 0.17107219, 0.21323203, 0.27523434, 0.3267342, 0.345465, 0.3494099, 0.3568633, 0.35859317, 0.35465744, 0.3503483, 0.3504434, 0.35230294, 0.35338658, 0.34886745, 0.34389555, 0.34269702, 0.3502368, 0.3567442, 0.35881096, 0.36268607, 0.35834268, 0.33605078, 0.2990081, 0.27139726, 0.23761351, 0.09047098))])\n",
        "\n",
        "  #                                       \n",
        "                                       \n",
        "\n",
        "transform_test = transforms.Compose([transforms.ToTensor()])#, transforms.Normalize((0.011153135, 0.03472079, 0.048551384, 0.07910808, 0.14255448, 0.21038567, 0.25234732, 0.28055963, 0.3307004, 0.39365456, 0.44600338, 0.46780568, 0.47594306, 0.46123105, 0.45222405, 0.48629662, 0.49890196, 0.48788238, 0.45848757, 0.39965674, 0.34338284, 0.31598544, 0.28804013, 0.23569258, 0.1702246, 0.12777059, 0.09138662, 0.022000086),(0.066316985, 0.14669645, 0.17107219, 0.21323203, 0.27523434, 0.3267342, 0.345465, 0.3494099, 0.3568633, 0.35859317, 0.35465744, 0.3503483, 0.3504434, 0.35230294, 0.35338658, 0.34886745, 0.34389555, 0.34269702, 0.3502368, 0.3567442, 0.35881096, 0.36268607, 0.35834268, 0.33605078, 0.2990081, 0.27139726, 0.23761351, 0.09047098))])\n",
        "                                       \n",
        "  # Fashion training set, test set 불러오기\n",
        "modified_data = FashionDataset(train_csv, transform=transform_train)\n",
        "normal_data = FashionDataset(train_csv, transform=transform_test)\n",
        "train_data = torch.utils.data.ConcatDataset([modified_data,normal_data])\n",
        "valid_data = torch.utils.data.ConcatDataset([normal_data,normal_data])\n",
        "train_loader = DataLoader(train_data, batch_size=batch_size)\n",
        "# validation_set = train_set\n",
        "# validaion_loader = DataLoader(train_set, batch_size=128)\n",
        "# num_train = len(train_set)\n",
        "# indices = list(range(num_train))\n",
        "# train_idx, valid_idx = indices[12000:], indices[:12000]\n",
        "# train_sampler = SubsetRandomSampler(train_idx)\n",
        "# valid_sampler = SubsetRandomSampler(valid_idx)\n",
        "\n",
        "\n",
        "# train_loader = torch.utils.data.DataLoader(train_set, batch_size=batch_size, sampler=train_sampler,num_workers=2)\n",
        "\n",
        "# test_loader = torch.utils.data.DataLoader(testset, batch_size=batch_size,\n",
        "#                                           shuffle=False, num_workers=2)\n",
        "\n",
        "# valid_loader = torch.utils.data.DataLoader(train_set, batch_size=batch_size, sampler=valid_sampler, num_workers=2)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TjC5KRU9J9PC",
        "outputId": "c485c3cd-0846-4250-c298-44b7cf9935dc"
      },
      "source": [
        "a = next(iter(train_loader))\n",
        "print(a[0].size())\n",
        "len(train_data)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "torch.Size([100, 1, 28, 28])\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "120000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6Sc1GjA2TZud"
      },
      "source": [
        "def calc_distribution(dataset):\n",
        "    # train_data = torchvision.datasets.CIFAR10('./data', train=True, download=True)\n",
        "    # use np.concatenate to stick all the images together to form a 1600000 X 32 X 3 array\n",
        "    x = np.concatenate([np.asarray(dataset[i][0]) for i in range(len(dataset))])\n",
        "    print(x.shape)\n",
        "    train_mean = np.mean(x, axis=(0, 1))\n",
        "    train_std = np.std(x, axis=(0, 1))\n",
        "    print(tuple(train_mean / 255))\n",
        "    print(tuple(train_std / 255))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5M5AaPQcZsJ2"
      },
      "source": [
        "#  calc_distribution(train_set)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FB2MARkCKvcO",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 122
        },
        "outputId": "f8a8f90c-d242-4575-cf4e-d1c8dcd78a2a"
      },
      "source": [
        "def image_show(train_set, num):\n",
        "    for i in range(num):\n",
        "      plt.subplot(1, num, i + 1, autoscale_on=True)\n",
        "      plt.imshow(train_set[i][0].squeeze(), cmap=plt.cm.binary)\n",
        "      plt.title(str(train_set[i][1])+\" : \"+output_label(train_set[i][1]))\n",
        "image_show(modified_data, 5)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 5 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 122
        },
        "id": "AGN2hBVluFGQ",
        "outputId": "be903d46-7de2-46fa-ce0d-d34bbc80153d"
      },
      "source": [
        "image_show(normal_data, 5)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 5 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EW8rF6lwNUz9",
        "outputId": "1895a0ac-8479-441e-942a-afbefe993791"
      },
      "source": [
        "# define dataloader\n",
        "data_loader = torch.utils.data.DataLoader(train_data, batch_size=10)\n",
        "\n",
        "batch = next(iter(data_loader))\n",
        "images, labels = batch\n",
        "print(type(images), type(labels))\n",
        "print(images.shape, labels.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'torch.Tensor'> <class 'torch.Tensor'>\n",
            "torch.Size([10, 1, 28, 28]) torch.Size([10])\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6l87uQR2Nrwn"
      },
      "source": [
        "# model design\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_wxZy1DDzVct"
      },
      "source": [
        "# define model\n",
        "class FashionNet(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(FashionNet, self).__init__()\n",
        "        \n",
        "        self.layer1 = nn.Sequential(\n",
        "            nn.Conv2d(in_channels=1, out_channels=32, kernel_size=3, padding=1),\n",
        "            nn.BatchNorm2d(32),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(kernel_size=2, stride=2)\n",
        "        )\n",
        "        \n",
        "        self.layer2 = nn.Sequential(\n",
        "            nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3),\n",
        "            nn.BatchNorm2d(64),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2)\n",
        "        )\n",
        "        \n",
        "        self.fc1 = nn.Linear(in_features=64*6*6, out_features=600)\n",
        "        self.drop = nn.Dropout2d(dropout)\n",
        "        self.fc2 = nn.Linear(in_features=600, out_features=120)\n",
        "        self.fc3 = nn.Linear(in_features=120, out_features=10)\n",
        "        \n",
        "    def forward(self, x):\n",
        "        out = self.layer1(x)\n",
        "        out = self.layer2(out)\n",
        "        out = out.view(out.size(0), -1)\n",
        "        out = self.fc1(out)\n",
        "        out = self.drop(out)\n",
        "        out = self.fc2(out)\n",
        "        out = self.fc3(out)\n",
        "        logits = out\n",
        "        probs = F.softmax(logits, dim=1)\n",
        "        return logits, probs"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bX05B7TDWu-k"
      },
      "source": [
        "# print loss\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UdBmJXkfTVxl"
      },
      "source": [
        "def plot_losses(fold, train_losses, valid_losses, learning_rate, num_epochs, batch_size):\n",
        "    '''\n",
        "    Function for plotting training and validation losses\n",
        "    '''\n",
        "\n",
        "    # temporarily change the style of the plots to seaborn\n",
        "    plt.style.use('seaborn')\n",
        "\n",
        "    train_losses = np.array(train_losses)\n",
        "    valid_losses = np.array(valid_losses)\n",
        "\n",
        "    fig, ax = plt.subplots(figsize=(8, 4.5))\n",
        "\n",
        "    ax.plot(train_losses, color='blue', label='Training loss')\n",
        "    ax.plot(valid_losses, color='red', label='Validation loss')\n",
        "    ax.set(title=\"fold \"+str(fold)+\",Loss over epochs, using learning_rate =\" + str(learning_rate) + \",epoch = \" + str(num_epochs) + \",batch_size = \" + str(batch_size),\n",
        "           xlabel='Epoch',\n",
        "           ylabel='Cross Entropy Loss')\n",
        "    ax.legend()\n",
        "    plt.tight_layout()\n",
        "    fig.savefig(pj_root+\"Train_Valid_Results/\"+str(fold)+\"_fold_loss .png\", dpi=300)\n",
        "    fig.show()\n",
        "\n",
        "    # change the plot style to default\n",
        "    plt.style.use('default')\n",
        "\n",
        "\n",
        "def plot_acc(fold, train_acc_list, valid_acc_list, learning_rate, num_epochs, batch_size):\n",
        "    '''\n",
        "    Function for plotting training and validation losses\n",
        "    '''\n",
        "\n",
        "    # temporarily change the style of the plots to seaborn\n",
        "    plt.style.use('seaborn')\n",
        "\n",
        "    train_losses = np.array(train_acc_list)\n",
        "    valid_losses = np.array(valid_acc_list)\n",
        "\n",
        "    fig, ax = plt.subplots(figsize=(8, 4.5))\n",
        "\n",
        "    ax.plot(train_losses, color='blue', label='Training accuracy')\n",
        "    ax.plot(valid_losses, color='red', label='Validation accuracy')\n",
        "    ax.set(title=\"fold \"+str(fold)+\",accuracy over epochs, using learning_rate =\"\n",
        "                 + str(learning_rate) + \",epoch = \" + str(num_epochs) + \",batch_size = \" + str(batch_size),\n",
        "           xlabel='Epoch',\n",
        "           ylabel='accuracy(%)')\n",
        "    ax.legend()\n",
        "    plt.tight_layout()\n",
        "    fig.savefig(pj_root+\"Train_Valid_Results/\"+str(fold)+\"_fold_acc.png\", dpi=300)\n",
        "    fig.show()\n",
        "\n",
        "    # change the plot style to default\n",
        "    plt.style.use('default')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Wmk6CG_sOK2p"
      },
      "source": [
        "# Train our network "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yia1DcnnSyYa"
      },
      "source": [
        "# training function\n",
        "def train(train_loader, model, criterion, optimizer, device):\n",
        "    '''\n",
        "    Function for the training step of the training loop\n",
        "    '''\n",
        "\n",
        "    model.train()\n",
        "    running_loss = 0\n",
        "    correct_pred = 0\n",
        "    n = 0\n",
        "\n",
        "    for X, y_true in train_loader:\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        X = X.to(device)\n",
        "        y_true = y_true.to(device)\n",
        "\n",
        "        # Forward pass\n",
        "        y_hat, y_prob = model(X)\n",
        "        _, predicted_labels = torch.max(y_prob, 1)\n",
        "\n",
        "\n",
        "        loss = criterion(y_hat, y_true)\n",
        "        running_loss += loss.item() * X.size(0)\n",
        "        n += y_true.size(0)\n",
        "        correct_pred += (predicted_labels == y_true).sum()\n",
        "        epoch_accuracy = 100*correct_pred.float() / n\n",
        "\n",
        "        # Backward pass\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "    epoch_loss = running_loss / len(train_loader.dataset)\n",
        "\n",
        "    return model, optimizer, epoch_loss, epoch_accuracy"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZrZnlwopzxWU"
      },
      "source": [
        "# validation function\n",
        "def validate(valid_loader, model, criterion, device):\n",
        "    '''\n",
        "    Function for the validation step of the training loop\n",
        "    '''\n",
        "\n",
        "    model.eval()\n",
        "    running_loss = 0\n",
        "    correct_pred = 0\n",
        "    n = 0\n",
        "\n",
        "    for X, y_true in valid_loader:\n",
        "        X = X.to(device)\n",
        "        y_true = y_true.to(device)\n",
        "\n",
        "        # Forward pass\n",
        "        y_hat, y_prob = model(X)\n",
        "        _, predicted_labels = torch.max(y_prob, 1)\n",
        "\n",
        "        loss = criterion(y_hat, y_true)\n",
        "        running_loss += loss.item() * X.size(0)\n",
        "        n += y_true.size(0)\n",
        "        correct_pred += (predicted_labels == y_true).sum()\n",
        "        epoch_accuracy = 100*correct_pred.float() / n\n",
        "\n",
        "    epoch_loss = running_loss / len(train_loader.dataset)\n",
        "\n",
        "    return model, epoch_loss, epoch_accuracy"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FllWZQMPzuSK"
      },
      "source": [
        "def training_loop(model, criterion, optimizer, train_loader, valid_loader, num_epochs, device, print_interval=10):\n",
        "    '''\n",
        "    Function defining the entire training loop\n",
        "    '''\n",
        "    f = open(pj_root+\"Train_Valid_Results/\"+str(fold)+\"_fold_log.txt\", 'a')\n",
        "    f.write(\"learning_rate =\" + str(learning_rate) + \",epoch = \" + str(num_epochs) + \",batch_size = \" + str(batch_size))\n",
        "    f.close()\n",
        "\n",
        "\n",
        "    # set objects for storing metrics\n",
        "    train_losses = []\n",
        "    valid_losses = []\n",
        "    train_acc_list = []\n",
        "    valid_acc_list = []\n",
        "\n",
        "    # Train model\n",
        "    for epoch in range(0, num_epochs):\n",
        "        # training\n",
        "        model, optimizer, train_loss, train_acc = train(train_loader, model, criterion, optimizer, device)\n",
        "        train_losses.append(train_loss)\n",
        "        train_acc_list.append(train_acc)\n",
        "      # print('Training process has finished. Saving trained model.')\n",
        "\n",
        "        # validation\n",
        "        with torch.no_grad():\n",
        "            model, valid_loss,valid_acc = validate(valid_loader, model, criterion, device)\n",
        "            valid_losses.append(valid_loss)\n",
        "            valid_acc_list.append(valid_acc)\n",
        "\n",
        "        if epoch % print_interval == (print_interval - 1):\n",
        "            torch.save(model.state_dict(), pj_root+\"Train_Valid_Results/\"+str(fold)+\"_fold_model.pth\")\n",
        "            print(f'{datetime.now().time().replace(microsecond=0)} --- '\n",
        "                  f'Epoch: {epoch + 1}\\t'\n",
        "                  f'Train loss: {train_loss:.4f}\\t'\n",
        "                  f'Valid loss: {valid_loss:.4f}\\t'\n",
        "                  f'Train accuracy(%): {train_acc:.2f}\\t'\n",
        "                  f'Valid accuracy(%): {valid_acc:.2f}')\n",
        "\n",
        "            f = open(pj_root+\"Train_Valid_Results/log.txt\", 'a')\n",
        "            f.write(f'{datetime.now().time().replace(microsecond=0)} --- '\n",
        "                  f'Epoch: {epoch + 1}\\t'\n",
        "                  f'Train loss: {train_loss:.4f}\\t'\n",
        "                  f'Valid loss: {valid_loss:.4f}\\t'\n",
        "                  f'Train accuracy(%): {train_acc:.2f}\\t'\n",
        "                  f'Valid accuracy(%): {valid_acc:.2f}\\n')\n",
        "            f.close()\n",
        "\n",
        "    plot_losses(fold, train_losses, valid_losses, learning_rate, num_epochs, batch_size)\n",
        "    plot_acc(fold, train_acc_list, valid_acc_list, learning_rate, num_epochs, batch_size)\n",
        "\n",
        "    return model, optimizer, (train_losses, valid_losses, train_acc_list, valid_acc_list)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 484
        },
        "id": "vc5SEejbpEc1",
        "outputId": "5d983f85-e46d-4a28-88fc-3fbd8d508712"
      },
      "source": [
        "# main\n",
        "\n",
        "# For fold results\n",
        "results = {}\n",
        "  \n",
        "# Set fixed random number seed\n",
        "torch.manual_seed(1576 - 1485)\n",
        "\n",
        "# Define the K-fold Cross Validator\n",
        "kfold = KFold(n_splits=k_folds, shuffle=True)\n",
        "  \n",
        "# Start print\n",
        "print('--------------------------------')\n",
        "# K-fold Cross Validation model evaluation\n",
        "for fold, (train_ids, valid_ids) in enumerate(kfold.split(modified_data)):\n",
        "  \n",
        "  # Print\n",
        "  print(f'FOLD {fold+1}')\n",
        "  print('--------------------------------')\n",
        "  \n",
        "  # Sample elements randomly from a given list of ids, no replacement.\n",
        "  train_subsampler = torch.utils.data.SubsetRandomSampler(train_ids)\n",
        "  valid_subsampler = torch.utils.data.SubsetRandomSampler(valid_ids)\n",
        "  \n",
        "  # Define data loaders for training and testing data in this fold\n",
        "  train_loader = torch.utils.data.DataLoader(\n",
        "                    modified_data, \n",
        "                    batch_size=batch_size, sampler=train_subsampler)\n",
        "  valid_loader = torch.utils.data.DataLoader(\n",
        "                    normal_data,\n",
        "                    batch_size=batch_size, sampler=valid_subsampler)\n",
        "    \n",
        "    # Init the neural network\n",
        "  model = FashionNet().to(device)\n",
        "  criterion = nn.CrossEntropyLoss()\n",
        "  optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\n",
        "\n",
        "  model, optimizer, (train_losses, valid_losses, train_acc_list, valid_acc_list) = training_loop(model, criterion, optimizer, train_loader, valid_loader, num_epochs, device, print_interval=10) \n",
        "\n",
        "  plot_losses(fold, train_losses, valid_losses, learning_rate, num_epochs, batch_size)\n",
        "  plot_acc(fold, train_acc_list, valid_acc_list, learning_rate, num_epochs, batch_size)\n",
        "\n",
        "  # Print about testing\n",
        "  print('Starting testing')\n",
        "  \n",
        "  # Saving the model\n",
        "  save_path = f'./model-fold-{fold+1}.pth'\n",
        "  torch.save(model.state_dict(), save_path)\n",
        "\n",
        "  # Evaluationfor this fold\n",
        "  _, loss, accuracy = validate(valid_loader, model, criterion, device)\n",
        "\n",
        "  # Print accuracy\n",
        "  print('Accuracy for fold %d: %d %%' % (fold+1, accuracy))\n",
        "  print('--------------------------------')\n",
        "  results[fold] = accuracy\n",
        "  \n",
        "# Print fold results\n",
        "print(f'K-FOLD CROSS VALIDATION RESULTS FOR {k_folds} FOLDS')\n",
        "print('--------------------------------')\n",
        "sum = 0.0\n",
        "for key, value in results.items():\n",
        "  print(f'Fold {key+1}: {value} %')\n",
        "  sum += value\n",
        "print(f'Average: {sum/len(results.items())} %')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "--------------------------------\n",
            "FOLD 1\n",
            "--------------------------------\n",
            "05:49:33 --- Epoch: 10\tTrain loss: 0.2339\tValid loss: 0.0250\tTrain accuracy(%): 90.47\tValid accuracy(%): 91.18\n",
            "05:50:47 --- Epoch: 20\tTrain loss: 0.1934\tValid loss: 0.0243\tTrain accuracy(%): 92.11\tValid accuracy(%): 91.58\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-51-f0ad1b7f9ecf>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     36\u001b[0m   \u001b[0moptimizer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mAdam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlearning_rate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m   \u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptimizer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mtrain_losses\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalid_losses\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_acc_list\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalid_acc_list\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtraining_loop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptimizer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_loader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalid_loader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_epochs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdevice\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprint_interval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m   \u001b[0mplot_losses\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfold\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_losses\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalid_losses\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlearning_rate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_epochs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-50-f4c3ae8f35e9>\u001b[0m in \u001b[0;36mtraining_loop\u001b[0;34m(model, criterion, optimizer, train_loader, valid_loader, num_epochs, device, print_interval)\u001b[0m\n\u001b[1;32m     17\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mepoch\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_epochs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m         \u001b[0;31m# training\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m         \u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptimizer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_loss\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_acc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_loader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptimizer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m         \u001b[0mtrain_losses\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_loss\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m         \u001b[0mtrain_acc_list\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_acc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-22-01be0852ab94>\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(train_loader, model, criterion, optimizer, device)\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m         \u001b[0;31m# Forward pass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m         \u001b[0my_hat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_prob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m         \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpredicted_labels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_prob\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    887\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    888\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 889\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    890\u001b[0m         for hook in itertools.chain(\n\u001b[1;32m    891\u001b[0m                 \u001b[0m_global_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-20-29c0aeb48d7d>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 26\u001b[0;31m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayer1\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     27\u001b[0m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayer2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mview\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    887\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    888\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 889\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    890\u001b[0m         for hook in itertools.chain(\n\u001b[1;32m    891\u001b[0m                 \u001b[0m_global_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/container.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    117\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    118\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mmodule\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 119\u001b[0;31m             \u001b[0minput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    120\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    121\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    887\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    888\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 889\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    890\u001b[0m         for hook in itertools.chain(\n\u001b[1;32m    891\u001b[0m                 \u001b[0m_global_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/activation.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    100\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    101\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 102\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minplace\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    103\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    104\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mextra_repr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/functional.py\u001b[0m in \u001b[0;36mrelu\u001b[0;34m(input, inplace)\u001b[0m\n\u001b[1;32m   1204\u001b[0m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelu_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1205\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1206\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1207\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1208\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mm47aaT0fR51",
        "outputId": "4fd095ad-ae4e-4c97-9e6c-72ee30fd9ca2"
      },
      "source": [
        " print(model)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "FashionNet(\n",
            "  (layer1): Sequential(\n",
            "    (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
            "    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "    (2): ReLU()\n",
            "    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
            "  )\n",
            "  (layer2): Sequential(\n",
            "    (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1))\n",
            "    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
            "    (2): ReLU()\n",
            "    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
            "  )\n",
            "  (fc1): Linear(in_features=2304, out_features=600, bias=True)\n",
            "  (drop): Dropout2d(p=0.25, inplace=False)\n",
            "  (fc2): Linear(in_features=600, out_features=120, bias=True)\n",
            "  (fc3): Linear(in_features=120, out_features=10, bias=True)\n",
            ")\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gmEJFGIjxEBM",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 439
        },
        "outputId": "85fd223a-5dd0-404f-939c-72afeb5a2466"
      },
      "source": [
        "test_csv = pd.read_csv(pj_root+\"fashion-mnist_test.csv\", index_col = 0)\n",
        "test_csv"
      ],
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>label</th>\n",
              "      <th>pixel1</th>\n",
              "      <th>pixel2</th>\n",
              "      <th>pixel3</th>\n",
              "      <th>pixel4</th>\n",
              "      <th>pixel5</th>\n",
              "      <th>pixel6</th>\n",
              "      <th>pixel7</th>\n",
              "      <th>pixel8</th>\n",
              "      <th>pixel9</th>\n",
              "      <th>pixel10</th>\n",
              "      <th>pixel11</th>\n",
              "      <th>pixel12</th>\n",
              "      <th>pixel13</th>\n",
              "      <th>pixel14</th>\n",
              "      <th>pixel15</th>\n",
              "      <th>pixel16</th>\n",
              "      <th>pixel17</th>\n",
              "      <th>pixel18</th>\n",
              "      <th>pixel19</th>\n",
              "      <th>pixel20</th>\n",
              "      <th>pixel21</th>\n",
              "      <th>pixel22</th>\n",
              "      <th>pixel23</th>\n",
              "      <th>pixel24</th>\n",
              "      <th>pixel25</th>\n",
              "      <th>pixel26</th>\n",
              "      <th>pixel27</th>\n",
              "      <th>pixel28</th>\n",
              "      <th>pixel29</th>\n",
              "      <th>pixel30</th>\n",
              "      <th>pixel31</th>\n",
              "      <th>pixel32</th>\n",
              "      <th>pixel33</th>\n",
              "      <th>pixel34</th>\n",
              "      <th>pixel35</th>\n",
              "      <th>pixel36</th>\n",
              "      <th>pixel37</th>\n",
              "      <th>pixel38</th>\n",
              "      <th>pixel39</th>\n",
              "      <th>...</th>\n",
              "      <th>pixel745</th>\n",
              "      <th>pixel746</th>\n",
              "      <th>pixel747</th>\n",
              "      <th>pixel748</th>\n",
              "      <th>pixel749</th>\n",
              "      <th>pixel750</th>\n",
              "      <th>pixel751</th>\n",
              "      <th>pixel752</th>\n",
              "      <th>pixel753</th>\n",
              "      <th>pixel754</th>\n",
              "      <th>pixel755</th>\n",
              "      <th>pixel756</th>\n",
              "      <th>pixel757</th>\n",
              "      <th>pixel758</th>\n",
              "      <th>pixel759</th>\n",
              "      <th>pixel760</th>\n",
              "      <th>pixel761</th>\n",
              "      <th>pixel762</th>\n",
              "      <th>pixel763</th>\n",
              "      <th>pixel764</th>\n",
              "      <th>pixel765</th>\n",
              "      <th>pixel766</th>\n",
              "      <th>pixel767</th>\n",
              "      <th>pixel768</th>\n",
              "      <th>pixel769</th>\n",
              "      <th>pixel770</th>\n",
              "      <th>pixel771</th>\n",
              "      <th>pixel772</th>\n",
              "      <th>pixel773</th>\n",
              "      <th>pixel774</th>\n",
              "      <th>pixel775</th>\n",
              "      <th>pixel776</th>\n",
              "      <th>pixel777</th>\n",
              "      <th>pixel778</th>\n",
              "      <th>pixel779</th>\n",
              "      <th>pixel780</th>\n",
              "      <th>pixel781</th>\n",
              "      <th>pixel782</th>\n",
              "      <th>pixel783</th>\n",
              "      <th>pixel784</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>34</td>\n",
              "      <td>29</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>11</td>\n",
              "      <td>24</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>242</td>\n",
              "      <td>245</td>\n",
              "      <td>224</td>\n",
              "      <td>245</td>\n",
              "      <td>234</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>37</td>\n",
              "      <td>69</td>\n",
              "      <td>94</td>\n",
              "      <td>123</td>\n",
              "      <td>127</td>\n",
              "      <td>138</td>\n",
              "      <td>138</td>\n",
              "      <td>142</td>\n",
              "      <td>145</td>\n",
              "      <td>135</td>\n",
              "      <td>125</td>\n",
              "      <td>103</td>\n",
              "      <td>87</td>\n",
              "      <td>56</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>209</td>\n",
              "      <td>190</td>\n",
              "      <td>181</td>\n",
              "      <td>150</td>\n",
              "      <td>170</td>\n",
              "      <td>193</td>\n",
              "      <td>180</td>\n",
              "      <td>219</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>24</td>\n",
              "      <td>...</td>\n",
              "      <td>248</td>\n",
              "      <td>238</td>\n",
              "      <td>80</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>174</td>\n",
              "      <td>233</td>\n",
              "      <td>155</td>\n",
              "      <td>0</td>\n",
              "      <td>65</td>\n",
              "      <td>235</td>\n",
              "      <td>216</td>\n",
              "      <td>34</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>14</td>\n",
              "      <td>53</td>\n",
              "      <td>99</td>\n",
              "      <td>17</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>94</td>\n",
              "      <td>68</td>\n",
              "      <td>14</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>38</td>\n",
              "      <td>106</td>\n",
              "      <td>94</td>\n",
              "      <td>89</td>\n",
              "      <td>94</td>\n",
              "      <td>68</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>87</td>\n",
              "      <td>12</td>\n",
              "      <td>26</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>46</td>\n",
              "      <td>50</td>\n",
              "      <td>29</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>63</td>\n",
              "      <td>53</td>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>161</td>\n",
              "      <td>212</td>\n",
              "      <td>138</td>\n",
              "      <td>150</td>\n",
              "      <td>169</td>\n",
              "      <td>164</td>\n",
              "      <td>176</td>\n",
              "      <td>202</td>\n",
              "      <td>255</td>\n",
              "      <td>183</td>\n",
              "      <td>26</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>129</td>\n",
              "      <td>221</td>\n",
              "      <td>255</td>\n",
              "      <td>255</td>\n",
              "      <td>215</td>\n",
              "      <td>...</td>\n",
              "      <td>255</td>\n",
              "      <td>255</td>\n",
              "      <td>254</td>\n",
              "      <td>252</td>\n",
              "      <td>255</td>\n",
              "      <td>101</td>\n",
              "      <td>196</td>\n",
              "      <td>254</td>\n",
              "      <td>252</td>\n",
              "      <td>100</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>168</td>\n",
              "      <td>232</td>\n",
              "      <td>225</td>\n",
              "      <td>0</td>\n",
              "      <td>41</td>\n",
              "      <td>172</td>\n",
              "      <td>147</td>\n",
              "      <td>148</td>\n",
              "      <td>153</td>\n",
              "      <td>155</td>\n",
              "      <td>146</td>\n",
              "      <td>137</td>\n",
              "      <td>141</td>\n",
              "      <td>143</td>\n",
              "      <td>137</td>\n",
              "      <td>137</td>\n",
              "      <td>126</td>\n",
              "      <td>140</td>\n",
              "      <td>0</td>\n",
              "      <td>133</td>\n",
              "      <td>224</td>\n",
              "      <td>222</td>\n",
              "      <td>56</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>37</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>17</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>21</td>\n",
              "      <td>204</td>\n",
              "      <td>235</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>69</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9995</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>37</td>\n",
              "      <td>93</td>\n",
              "      <td>72</td>\n",
              "      <td>58</td>\n",
              "      <td>55</td>\n",
              "      <td>63</td>\n",
              "      <td>66</td>\n",
              "      <td>89</td>\n",
              "      <td>159</td>\n",
              "      <td>120</td>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>22</td>\n",
              "      <td>67</td>\n",
              "      <td>125</td>\n",
              "      <td>151</td>\n",
              "      <td>168</td>\n",
              "      <td>...</td>\n",
              "      <td>112</td>\n",
              "      <td>115</td>\n",
              "      <td>117</td>\n",
              "      <td>117</td>\n",
              "      <td>113</td>\n",
              "      <td>146</td>\n",
              "      <td>41</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>76</td>\n",
              "      <td>54</td>\n",
              "      <td>55</td>\n",
              "      <td>51</td>\n",
              "      <td>53</td>\n",
              "      <td>53</td>\n",
              "      <td>55</td>\n",
              "      <td>53</td>\n",
              "      <td>44</td>\n",
              "      <td>38</td>\n",
              "      <td>37</td>\n",
              "      <td>32</td>\n",
              "      <td>23</td>\n",
              "      <td>14</td>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9996</th>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>76</td>\n",
              "      <td>36</td>\n",
              "      <td>110</td>\n",
              "      <td>170</td>\n",
              "      <td>78</td>\n",
              "      <td>136</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>68</td>\n",
              "      <td>...</td>\n",
              "      <td>94</td>\n",
              "      <td>84</td>\n",
              "      <td>70</td>\n",
              "      <td>44</td>\n",
              "      <td>0</td>\n",
              "      <td>36</td>\n",
              "      <td>152</td>\n",
              "      <td>65</td>\n",
              "      <td>110</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>21</td>\n",
              "      <td>57</td>\n",
              "      <td>89</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>52</td>\n",
              "      <td>23</td>\n",
              "      <td>28</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9997</th>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>14</td>\n",
              "      <td>152</td>\n",
              "      <td>184</td>\n",
              "      <td>158</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>...</td>\n",
              "      <td>219</td>\n",
              "      <td>223</td>\n",
              "      <td>226</td>\n",
              "      <td>239</td>\n",
              "      <td>247</td>\n",
              "      <td>241</td>\n",
              "      <td>224</td>\n",
              "      <td>213</td>\n",
              "      <td>144</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>44</td>\n",
              "      <td>232</td>\n",
              "      <td>199</td>\n",
              "      <td>200</td>\n",
              "      <td>190</td>\n",
              "      <td>180</td>\n",
              "      <td>179</td>\n",
              "      <td>185</td>\n",
              "      <td>189</td>\n",
              "      <td>191</td>\n",
              "      <td>185</td>\n",
              "      <td>179</td>\n",
              "      <td>178</td>\n",
              "      <td>175</td>\n",
              "      <td>172</td>\n",
              "      <td>172</td>\n",
              "      <td>182</td>\n",
              "      <td>199</td>\n",
              "      <td>222</td>\n",
              "      <td>42</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9998</th>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>131</td>\n",
              "      <td>192</td>\n",
              "      <td>79</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>13</td>\n",
              "      <td>26</td>\n",
              "      <td>17</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9999</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>140</td>\n",
              "      <td>119</td>\n",
              "      <td>103</td>\n",
              "      <td>99</td>\n",
              "      <td>102</td>\n",
              "      <td>101</td>\n",
              "      <td>104</td>\n",
              "      <td>119</td>\n",
              "      <td>118</td>\n",
              "      <td>122</td>\n",
              "      <td>130</td>\n",
              "      <td>129</td>\n",
              "      <td>127</td>\n",
              "      <td>166</td>\n",
              "      <td>128</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>211</td>\n",
              "      <td>212</td>\n",
              "      <td>212</td>\n",
              "      <td>225</td>\n",
              "      <td>...</td>\n",
              "      <td>217</td>\n",
              "      <td>206</td>\n",
              "      <td>211</td>\n",
              "      <td>217</td>\n",
              "      <td>219</td>\n",
              "      <td>216</td>\n",
              "      <td>249</td>\n",
              "      <td>222</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>58</td>\n",
              "      <td>94</td>\n",
              "      <td>104</td>\n",
              "      <td>109</td>\n",
              "      <td>113</td>\n",
              "      <td>105</td>\n",
              "      <td>92</td>\n",
              "      <td>53</td>\n",
              "      <td>0</td>\n",
              "      <td>65</td>\n",
              "      <td>152</td>\n",
              "      <td>120</td>\n",
              "      <td>111</td>\n",
              "      <td>95</td>\n",
              "      <td>75</td>\n",
              "      <td>44</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10000 rows × 785 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      label  pixel1  pixel2  pixel3  ...  pixel781  pixel782  pixel783  pixel784\n",
              "0         0       0       0       0  ...         0         0         0         0\n",
              "1         1       0       0       0  ...         0         0         0         0\n",
              "2         2       0       0       0  ...        31         0         0         0\n",
              "3         2       0       0       0  ...       222        56         0         0\n",
              "4         3       0       0       0  ...         0         0         0         0\n",
              "...     ...     ...     ...     ...  ...       ...       ...       ...       ...\n",
              "9995      0       0       0       0  ...         1         0         0         0\n",
              "9996      6       0       0       0  ...        28         0         0         0\n",
              "9997      8       0       0       0  ...        42         0         1         0\n",
              "9998      8       0       1       3  ...         0         0         0         0\n",
              "9999      1       0       0       0  ...         0         0         0         0\n",
              "\n",
              "[10000 rows x 785 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cmIyDnbYa__g"
      },
      "source": [
        "test_data = FashionDataset(test_csv, transform=transform_test)\n",
        "test_loader = torch.utils.data.DataLoader(\n",
        "                    test_data,\n",
        "                    batch_size=batch_size\n",
        "                    )\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)"
      ],
      "execution_count": 82,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qYkj7ePGcFtp",
        "outputId": "b8599c51-73bd-4f50-9805-e1cc18835193"
      },
      "source": [
        "test_model = FashionNet()\n",
        "test_model.load_state_dict(torch.load(pj_root+'Train_Valid_Results_60000/+8_fold_model.pth'))\n",
        "test_model.to(device)"
      ],
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "FashionNet(\n",
              "  (layer1): Sequential(\n",
              "    (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "    (2): ReLU()\n",
              "    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
              "  )\n",
              "  (layer2): Sequential(\n",
              "    (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1))\n",
              "    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "    (2): ReLU()\n",
              "    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
              "  )\n",
              "  (fc1): Linear(in_features=2304, out_features=600, bias=True)\n",
              "  (drop): Dropout2d(p=0.25, inplace=False)\n",
              "  (fc2): Linear(in_features=600, out_features=120, bias=True)\n",
              "  (fc3): Linear(in_features=120, out_features=10, bias=True)\n",
              ")"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ColvzusTc6Y7",
        "outputId": "8a63f6b7-66f6-434d-c77c-1e1928b9cf53"
      },
      "source": [
        "test_model.eval()\n",
        "running_loss = 0\n",
        "correct_pred = 0\n",
        "n = 0\n",
        "with torch.no_grad():\n",
        "    for X, y_true in test_loader:\n",
        "        X = X.to(device)\n",
        "        y_true = y_true.to(device)\n",
        "\n",
        "        # Forward pass\n",
        "        y_hat, y_prob = test_model(X)\n",
        "        # print(y_hat, y_prob)\n",
        "        _, predicted_labels = torch.max(y_prob, 1)\n",
        "\n",
        "        loss = criterion(y_hat, y_true)\n",
        "        running_loss += loss.item() * X.size(0)\n",
        "        n += y_true.size(0)\n",
        "        correct_pred += (predicted_labels == y_true).sum()\n",
        "        epoch_accuracy = 100*correct_pred.float() / n\n",
        "        print(predicted_labels)\n",
        "        # print(int(correct_pred))\n",
        "num_test_data=len(test_loader)*batch_size\n",
        "print('Test Accuracy of the model on the {} test images: {} %'.format(num_test_data, 100*int(correct_pred) / num_test_data))"
      ],
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "tensor([0, 1, 2, 2, 3, 2, 8, 6, 5, 0, 3, 2, 4, 6, 8, 5, 6, 3, 6, 4, 4, 4, 2, 1,\n",
            "        5, 7, 8, 4, 4, 1, 5, 7, 7, 8, 1, 0, 9, 8, 0, 8, 2, 0, 4, 6, 2, 0, 3, 3,\n",
            "        2, 3, 2, 2, 9, 3, 0, 9, 9, 4, 6, 0, 4, 5, 4, 6, 1, 1, 0, 9, 5, 2, 7, 3,\n",
            "        4, 0, 5, 7, 1, 6, 1, 4, 9, 8, 1, 2, 4, 8, 9, 4, 1, 6, 3, 4, 2, 2, 2, 6,\n",
            "        4, 7, 7, 3], device='cuda:0')\n",
            "tensor([9, 3, 9, 0, 8, 2, 3, 8, 2, 7, 5, 5, 3, 2, 7, 5, 0, 2, 7, 1, 0, 5, 4, 4,\n",
            "        7, 0, 8, 5, 6, 3, 1, 7, 9, 4, 9, 6, 4, 4, 2, 4, 3, 3, 3, 2, 2, 6, 0, 0,\n",
            "        1, 3, 4, 3, 3, 1, 9, 3, 3, 3, 9, 5, 6, 7, 7, 3, 2, 4, 0, 3, 7, 2, 2, 8,\n",
            "        9, 0, 2, 4, 4, 5, 7, 9, 9, 1, 3, 9, 1, 5, 5, 6, 0, 7, 4, 9, 1, 6, 0, 0,\n",
            "        6, 4, 0, 9], device='cuda:0')\n",
            "tensor([0, 4, 2, 5, 5, 8, 6, 2, 1, 9, 0, 4, 7, 1, 9, 5, 9, 0, 2, 8, 5, 7, 7, 3,\n",
            "        2, 4, 5, 7, 8, 1, 9, 5, 6, 2, 9, 7, 4, 0, 9, 2, 1, 5, 7, 7, 0, 2, 4, 5,\n",
            "        3, 3, 8, 1, 6, 2, 4, 8, 4, 9, 8, 3, 3, 2, 4, 2, 2, 9, 3, 9, 2, 8, 6, 8,\n",
            "        8, 2, 7, 2, 5, 5, 9, 5, 8, 2, 4, 8, 4, 8, 3, 1, 2, 2, 2, 1, 8, 1, 3, 0,\n",
            "        4, 1, 7, 0], device='cuda:0')\n",
            "tensor([5, 2, 0, 7, 6, 6, 7, 4, 7, 7, 1, 6, 6, 6, 7, 8, 7, 0, 9, 2, 0, 2, 5, 0,\n",
            "        8, 5, 8, 7, 7, 4, 1, 2, 9, 7, 6, 0, 1, 6, 3, 8, 6, 5, 5, 0, 9, 2, 9, 8,\n",
            "        0, 6, 9, 6, 4, 3, 6, 6, 6, 8, 5, 9, 5, 1, 2, 0, 7, 1, 4, 7, 5, 9, 6, 2,\n",
            "        0, 2, 2, 6, 6, 7, 2, 9, 8, 3, 9, 7, 5, 1, 4, 2, 9, 5, 5, 0, 3, 4, 7, 4,\n",
            "        6, 4, 0, 5], device='cuda:0')\n",
            "tensor([0, 6, 0, 6, 3, 5, 7, 0, 5, 0, 9, 0, 5, 6, 7, 7, 5, 5, 4, 6, 0, 4, 0, 9,\n",
            "        8, 4, 1, 0, 6, 6, 2, 9, 4, 3, 1, 2, 5, 8, 3, 8, 2, 7, 1, 2, 0, 7, 8, 7,\n",
            "        4, 5, 1, 0, 3, 0, 5, 8, 4, 9, 9, 5, 5, 8, 4, 6, 3, 2, 7, 1, 5, 0, 5, 5,\n",
            "        9, 6, 0, 7, 6, 6, 7, 4, 8, 6, 3, 7, 3, 1, 4, 9, 7, 0, 8, 6, 2, 8, 8, 1,\n",
            "        7, 1, 9, 3], device='cuda:0')\n",
            "tensor([8, 1, 2, 2, 9, 3, 8, 6, 6, 4, 2, 5, 7, 1, 2, 0, 0, 2, 9, 4, 5, 2, 3, 8,\n",
            "        4, 2, 5, 5, 3, 7, 1, 9, 8, 9, 7, 0, 4, 4, 6, 1, 6, 4, 4, 1, 2, 7, 3, 5,\n",
            "        9, 7, 7, 1, 7, 2, 2, 8, 4, 4, 2, 8, 8, 3, 7, 3, 2, 7, 8, 4, 6, 6, 6, 5,\n",
            "        9, 4, 5, 8, 5, 4, 1, 1, 6, 7, 4, 4, 5, 0, 4, 2, 3, 4, 3, 2, 0, 2, 5, 2,\n",
            "        9, 7, 0, 1], device='cuda:0')\n",
            "tensor([1, 3, 7, 5, 7, 8, 5, 3, 0, 6, 7, 9, 6, 6, 6, 8, 0, 1, 8, 9, 1, 7, 8, 7,\n",
            "        9, 3, 1, 8, 3, 5, 4, 7, 9, 3, 7, 9, 5, 1, 3, 8, 6, 9, 2, 2, 6, 5, 6, 0,\n",
            "        5, 1, 3, 9, 7, 3, 9, 7, 4, 6, 2, 3, 9, 4, 1, 1, 8, 7, 7, 5, 8, 8, 4, 5,\n",
            "        8, 1, 4, 6, 6, 7, 3, 7, 6, 5, 7, 1, 3, 8, 3, 0, 3, 8, 4, 0, 1, 8, 0, 7,\n",
            "        2, 5, 0, 9], device='cuda:0')\n",
            "tensor([1, 1, 3, 4, 7, 3, 4, 7, 8, 9, 0, 1, 3, 5, 9, 6, 3, 9, 7, 1, 0, 9, 0, 1,\n",
            "        7, 0, 0, 5, 1, 9, 8, 7, 3, 9, 1, 0, 3, 8, 9, 4, 9, 3, 9, 3, 6, 8, 0, 0,\n",
            "        8, 9, 7, 9, 0, 5, 9, 2, 2, 7, 7, 3, 1, 9, 8, 3, 4, 8, 9, 1, 8, 8, 0, 6,\n",
            "        7, 1, 4, 3, 3, 2, 1, 4, 5, 0, 7, 8, 8, 8, 6, 0, 2, 7, 8, 1, 9, 3, 5, 2,\n",
            "        4, 8, 3, 1], device='cuda:0')\n",
            "tensor([1, 6, 1, 4, 3, 9, 9, 1, 1, 5, 9, 4, 5, 9, 5, 5, 8, 0, 3, 6, 3, 7, 9, 3,\n",
            "        5, 2, 6, 5, 2, 9, 8, 5, 9, 2, 9, 3, 8, 7, 6, 5, 1, 7, 0, 8, 8, 9, 9, 6,\n",
            "        2, 8, 9, 7, 3, 0, 4, 5, 0, 0, 6, 8, 9, 2, 2, 8, 2, 4, 6, 9, 2, 9, 5, 5,\n",
            "        9, 9, 2, 7, 4, 7, 8, 3, 6, 1, 8, 3, 0, 0, 0, 2, 9, 7, 3, 0, 1, 7, 1, 9,\n",
            "        8, 9, 4, 6], device='cuda:0')\n",
            "tensor([3, 6, 3, 4, 5, 5, 0, 6, 6, 2, 9, 1, 0, 0, 1, 0, 3, 5, 3, 7, 6, 2, 2, 8,\n",
            "        8, 6, 2, 5, 2, 8, 8, 3, 2, 6, 8, 0, 6, 6, 1, 2, 1, 3, 6, 5, 2, 5, 0, 6,\n",
            "        0, 2, 9, 0, 5, 0, 0, 2, 1, 8, 5, 0, 2, 6, 3, 3, 6, 3, 3, 2, 6, 9, 0, 3,\n",
            "        4, 7, 6, 7, 1, 4, 7, 2, 3, 9, 1, 3, 8, 8, 4, 3, 6, 9, 0, 9, 6, 0, 2, 9,\n",
            "        2, 7, 4, 5], device='cuda:0')\n",
            "tensor([2, 2, 4, 5, 2, 4, 8, 5, 1, 3, 8, 0, 1, 8, 4, 2, 8, 7, 9, 0, 8, 5, 9, 4,\n",
            "        1, 6, 8, 5, 2, 7, 5, 1, 8, 2, 5, 4, 2, 7, 3, 9, 2, 4, 5, 7, 5, 9, 8, 0,\n",
            "        6, 2, 4, 4, 7, 4, 3, 2, 6, 8, 8, 8, 9, 7, 8, 0, 7, 6, 5, 3, 3, 6, 5, 0,\n",
            "        3, 3, 9, 5, 1, 3, 6, 7, 7, 9, 8, 1, 1, 7, 7, 8, 7, 5, 9, 4, 1, 7, 3, 5,\n",
            "        7, 6, 6, 4], device='cuda:0')\n",
            "tensor([4, 6, 7, 8, 1, 7, 0, 0, 1, 0, 9, 3, 9, 6, 6, 1, 8, 1, 6, 7, 2, 6, 6, 4,\n",
            "        5, 9, 8, 1, 2, 4, 6, 6, 2, 5, 1, 7, 3, 3, 0, 9, 6, 9, 5, 1, 5, 7, 0, 7,\n",
            "        6, 8, 2, 9, 6, 3, 9, 3, 3, 0, 8, 8, 0, 0, 9, 2, 7, 1, 5, 7, 8, 2, 3, 8,\n",
            "        9, 5, 7, 4, 1, 0, 1, 7, 3, 6, 0, 8, 2, 7, 5, 5, 2, 3, 4, 3, 5, 9, 0, 5,\n",
            "        7, 1, 3, 9], device='cuda:0')\n",
            "tensor([5, 5, 7, 4, 6, 9, 0, 8, 6, 3, 8, 7, 0, 0, 1, 8, 3, 7, 8, 2, 4, 8, 6, 8,\n",
            "        7, 5, 7, 5, 6, 5, 4, 4, 1, 7, 4, 9, 1, 1, 3, 8, 1, 9, 7, 5, 7, 8, 8, 9,\n",
            "        6, 5, 2, 1, 4, 5, 8, 6, 4, 9, 0, 9, 4, 5, 6, 5, 4, 6, 5, 5, 7, 5, 6, 5,\n",
            "        0, 5, 1, 8, 9, 6, 3, 9, 6, 0, 5, 6, 4, 9, 3, 2, 1, 9, 7, 7, 0, 7, 0, 1,\n",
            "        3, 7, 7, 1], device='cuda:0')\n",
            "tensor([0, 4, 6, 4, 5, 5, 4, 2, 9, 2, 8, 8, 4, 6, 3, 4, 0, 2, 9, 5, 7, 2, 5, 1,\n",
            "        6, 6, 3, 9, 8, 9, 5, 0, 6, 4, 2, 9, 2, 8, 2, 0, 6, 6, 1, 2, 2, 0, 0, 9,\n",
            "        9, 9, 9, 6, 1, 0, 9, 1, 8, 8, 8, 7, 0, 5, 3, 3, 2, 0, 6, 1, 7, 9, 1, 8,\n",
            "        5, 9, 5, 0, 1, 7, 3, 6, 5, 1, 6, 8, 9, 6, 6, 0, 9, 7, 3, 8, 6, 2, 2, 7,\n",
            "        6, 8, 3, 5], device='cuda:0')\n",
            "tensor([2, 2, 9, 2, 2, 0, 0, 1, 0, 0, 5, 1, 4, 1, 7, 6, 3, 0, 1, 6, 9, 6, 2, 0,\n",
            "        5, 0, 2, 2, 6, 6, 0, 1, 5, 3, 4, 4, 4, 7, 6, 9, 2, 0, 7, 0, 1, 0, 6, 6,\n",
            "        2, 1, 6, 1, 0, 3, 4, 4, 8, 2, 0, 6, 3, 9, 8, 9, 4, 1, 5, 0, 3, 3, 1, 4,\n",
            "        4, 9, 6, 2, 5, 0, 9, 7, 4, 0, 4, 2, 9, 0, 4, 2, 2, 2, 8, 2, 5, 1, 3, 8,\n",
            "        3, 8, 5, 1], device='cuda:0')\n",
            "tensor([0, 5, 4, 5, 6, 3, 3, 7, 9, 5, 7, 4, 5, 1, 1, 6, 1, 1, 8, 7, 1, 1, 1, 8,\n",
            "        8, 0, 5, 0, 4, 6, 2, 7, 5, 4, 2, 5, 4, 6, 9, 9, 7, 5, 6, 1, 3, 1, 3, 2,\n",
            "        5, 7, 1, 4, 1, 5, 4, 4, 4, 7, 4, 7, 1, 5, 6, 4, 2, 6, 9, 7, 0, 7, 9, 3,\n",
            "        2, 1, 7, 0, 9, 6, 8, 8, 5, 4, 8, 2, 1, 9, 7, 8, 6, 7, 5, 0, 3, 5, 6, 7,\n",
            "        0, 0, 7, 4], device='cuda:0')\n",
            "tensor([4, 6, 8, 0, 1, 6, 5, 3, 3, 0, 4, 8, 3, 9, 8, 9, 4, 7, 9, 5, 0, 4, 9, 6,\n",
            "        2, 8, 6, 1, 4, 5, 8, 1, 7, 1, 1, 6, 8, 8, 3, 7, 4, 5, 4, 6, 7, 3, 3, 6,\n",
            "        2, 4, 2, 6, 2, 1, 6, 8, 1, 2, 3, 0, 1, 4, 2, 0, 3, 5, 6, 6, 4, 2, 4, 3,\n",
            "        1, 1, 7, 5, 9, 6, 4, 7, 3, 3, 3, 3, 7, 0, 1, 7, 7, 0, 5, 0, 7, 8, 2, 4,\n",
            "        9, 4, 4, 4], device='cuda:0')\n",
            "tensor([9, 1, 4, 4, 0, 2, 4, 0, 2, 1, 9, 0, 3, 8, 6, 1, 3, 4, 8, 9, 6, 9, 6, 2,\n",
            "        5, 9, 7, 4, 5, 6, 2, 0, 6, 8, 8, 5, 0, 8, 0, 0, 7, 9, 5, 9, 0, 5, 3, 4,\n",
            "        9, 6, 2, 5, 8, 6, 7, 7, 0, 9, 9, 8, 0, 7, 0, 6, 3, 5, 0, 8, 4, 3, 9, 3,\n",
            "        0, 0, 2, 1, 1, 8, 9, 0, 0, 7, 4, 1, 6, 2, 6, 2, 4, 1, 1, 4, 0, 9, 4, 2,\n",
            "        9, 3, 3, 6], device='cuda:0')\n",
            "tensor([3, 1, 1, 7, 0, 6, 6, 9, 7, 1, 0, 4, 9, 5, 1, 0, 5, 2, 1, 3, 5, 3, 9, 2,\n",
            "        8, 7, 4, 2, 9, 4, 9, 0, 4, 0, 1, 2, 3, 7, 6, 9, 3, 3, 0, 5, 1, 1, 4, 3,\n",
            "        8, 3, 6, 5, 9, 1, 0, 0, 3, 6, 7, 0, 9, 7, 0, 7, 4, 2, 1, 9, 7, 2, 8, 3,\n",
            "        1, 0, 6, 7, 3, 0, 3, 0, 5, 8, 6, 9, 9, 5, 6, 2, 0, 1, 3, 0, 4, 9, 2, 4,\n",
            "        8, 6, 4, 9], device='cuda:0')\n",
            "tensor([9, 0, 5, 5, 2, 5, 3, 3, 9, 4, 0, 4, 3, 9, 6, 7, 3, 7, 8, 4, 3, 5, 1, 2,\n",
            "        7, 6, 9, 6, 7, 3, 5, 9, 6, 8, 7, 9, 3, 4, 6, 2, 4, 7, 9, 5, 8, 0, 3, 5,\n",
            "        3, 1, 8, 8, 2, 5, 5, 2, 7, 3, 4, 5, 9, 6, 5, 2, 6, 3, 4, 4, 2, 9, 8, 0,\n",
            "        1, 6, 4, 1, 9, 8, 8, 0, 3, 8, 6, 7, 5, 9, 5, 1, 3, 3, 4, 4, 1, 0, 7, 2,\n",
            "        5, 2, 5, 8], device='cuda:0')\n",
            "tensor([8, 5, 3, 4, 9, 5, 8, 7, 6, 4, 2, 8, 9, 0, 3, 0, 6, 5, 0, 5, 6, 3, 1, 5,\n",
            "        5, 3, 4, 0, 9, 2, 4, 9, 0, 0, 3, 5, 6, 0, 8, 0, 5, 6, 1, 3, 6, 2, 8, 3,\n",
            "        8, 2, 9, 2, 8, 7, 1, 9, 7, 6, 5, 8, 7, 4, 4, 3, 8, 9, 0, 3, 8, 3, 1, 0,\n",
            "        3, 2, 7, 3, 2, 2, 2, 7, 3, 1, 3, 4, 9, 0, 2, 4, 0, 1, 0, 5, 1, 2, 4, 0,\n",
            "        9, 7, 3, 9], device='cuda:0')\n",
            "tensor([3, 8, 1, 3, 4, 9, 3, 3, 2, 5, 1, 1, 7, 8, 0, 6, 2, 9, 3, 2, 5, 0, 1, 8,\n",
            "        4, 0, 4, 1, 0, 7, 0, 8, 5, 6, 0, 6, 8, 0, 0, 6, 7, 9, 2, 6, 0, 6, 3, 3,\n",
            "        4, 3, 3, 9, 7, 1, 9, 7, 4, 2, 8, 7, 5, 5, 5, 8, 8, 9, 8, 3, 2, 6, 2, 0,\n",
            "        6, 6, 2, 5, 8, 3, 5, 6, 7, 2, 9, 3, 0, 8, 2, 7, 8, 0, 9, 6, 1, 7, 6, 3,\n",
            "        5, 1, 0, 3], device='cuda:0')\n",
            "tensor([0, 7, 9, 9, 9, 0, 3, 6, 3, 4, 9, 0, 1, 0, 6, 0, 1, 2, 8, 1, 2, 0, 0, 8,\n",
            "        6, 0, 4, 2, 9, 9, 5, 2, 1, 4, 7, 3, 5, 3, 5, 6, 9, 0, 7, 4, 5, 3, 2, 9,\n",
            "        4, 2, 8, 0, 3, 1, 8, 1, 6, 4, 8, 0, 1, 3, 4, 5, 9, 9, 8, 6, 3, 3, 2, 1,\n",
            "        4, 6, 9, 5, 6, 5, 7, 2, 4, 8, 0, 0, 7, 7, 8, 3, 4, 1, 4, 6, 4, 8, 4, 3,\n",
            "        0, 8, 2, 5], device='cuda:0')\n",
            "tensor([5, 2, 8, 5, 7, 9, 8, 1, 3, 6, 4, 7, 1, 6, 9, 6, 9, 3, 8, 1, 9, 5, 7, 8,\n",
            "        6, 4, 5, 2, 4, 3, 3, 3, 9, 7, 6, 6, 6, 5, 3, 8, 3, 3, 2, 8, 8, 4, 8, 8,\n",
            "        6, 7, 6, 2, 7, 5, 3, 4, 5, 1, 5, 4, 7, 3, 3, 6, 4, 0, 3, 4, 5, 1, 1, 9,\n",
            "        0, 4, 9, 6, 3, 8, 5, 8, 3, 0, 3, 3, 2, 4, 2, 4, 1, 7, 5, 3, 9, 6, 2, 0,\n",
            "        3, 4, 0, 8], device='cuda:0')\n",
            "tensor([2, 3, 9, 6, 9, 7, 1, 9, 9, 8, 8, 9, 5, 2, 1, 0, 1, 6, 9, 4, 0, 2, 1, 5,\n",
            "        0, 0, 8, 7, 8, 6, 9, 5, 2, 1, 4, 1, 1, 6, 2, 0, 1, 1, 6, 7, 0, 3, 9, 7,\n",
            "        3, 8, 1, 2, 8, 1, 8, 5, 9, 8, 4, 1, 3, 4, 5, 8, 8, 6, 5, 0, 9, 1, 7, 1,\n",
            "        2, 2, 0, 9, 3, 1, 8, 3, 1, 6, 7, 1, 1, 5, 5, 6, 6, 4, 6, 9, 0, 8, 6, 5,\n",
            "        2, 9, 1, 8], device='cuda:0')\n",
            "tensor([8, 3, 5, 5, 0, 8, 8, 5, 3, 0, 7, 5, 8, 4, 5, 3, 6, 4, 2, 8, 3, 0, 2, 2,\n",
            "        3, 4, 5, 9, 9, 4, 9, 8, 4, 0, 9, 4, 8, 9, 1, 6, 9, 5, 2, 7, 7, 3, 3, 6,\n",
            "        1, 2, 2, 3, 2, 0, 0, 6, 9, 5, 9, 9, 6, 4, 3, 8, 6, 6, 5, 9, 3, 6, 0, 8,\n",
            "        5, 5, 1, 2, 0, 5, 1, 7, 3, 2, 9, 1, 4, 8, 9, 9, 0, 4, 5, 5, 4, 1, 3, 5,\n",
            "        8, 6, 7, 5], device='cuda:0')\n",
            "tensor([7, 2, 5, 6, 2, 9, 8, 8, 9, 7, 6, 6, 2, 1, 3, 4, 8, 8, 3, 3, 9, 8, 7, 6,\n",
            "        3, 4, 7, 5, 8, 0, 3, 1, 2, 0, 4, 4, 9, 7, 5, 0, 2, 3, 6, 7, 7, 7, 0, 6,\n",
            "        4, 7, 9, 8, 9, 8, 2, 9, 5, 8, 9, 8, 2, 2, 6, 0, 3, 2, 9, 2, 6, 7, 4, 3,\n",
            "        2, 2, 6, 9, 1, 8, 2, 8, 1, 0, 5, 1, 0, 4, 1, 6, 3, 6, 3, 4, 6, 5, 3, 5,\n",
            "        4, 1, 6, 4], device='cuda:0')\n",
            "tensor([5, 2, 7, 4, 6, 3, 9, 3, 9, 1, 2, 7, 1, 8, 5, 1, 5, 2, 3, 4, 1, 2, 6, 4,\n",
            "        5, 9, 9, 7, 3, 0, 4, 5, 2, 0, 8, 3, 9, 7, 9, 5, 2, 8, 8, 0, 8, 5, 5, 2,\n",
            "        1, 4, 9, 5, 1, 5, 5, 9, 3, 6, 5, 5, 5, 0, 9, 0, 1, 4, 4, 9, 8, 3, 3, 9,\n",
            "        8, 4, 8, 7, 1, 4, 3, 4, 8, 6, 8, 9, 3, 1, 5, 0, 4, 6, 5, 1, 5, 6, 8, 3,\n",
            "        9, 7, 9, 4], device='cuda:0')\n",
            "tensor([2, 0, 7, 7, 3, 3, 2, 4, 0, 9, 9, 4, 3, 0, 7, 1, 9, 8, 4, 2, 0, 9, 7, 9,\n",
            "        1, 0, 8, 4, 6, 2, 9, 1, 0, 7, 9, 1, 7, 4, 7, 1, 4, 8, 8, 0, 9, 2, 6, 7,\n",
            "        7, 4, 4, 7, 9, 0, 2, 5, 5, 1, 0, 0, 7, 4, 9, 7, 1, 8, 8, 2, 8, 1, 6, 7,\n",
            "        1, 4, 3, 6, 0, 0, 6, 8, 2, 0, 5, 3, 2, 0, 8, 5, 4, 2, 7, 1, 5, 8, 8, 0,\n",
            "        9, 1, 4, 3], device='cuda:0')\n",
            "tensor([4, 3, 3, 3, 1, 5, 1, 9, 2, 6, 2, 8, 4, 4, 5, 0, 2, 4, 2, 0, 7, 3, 4, 0,\n",
            "        8, 8, 7, 5, 0, 9, 4, 1, 7, 5, 0, 4, 2, 6, 8, 1, 2, 9, 6, 5, 0, 9, 3, 0,\n",
            "        2, 9, 0, 5, 9, 6, 5, 6, 1, 6, 2, 0, 0, 4, 3, 9, 6, 0, 8, 7, 7, 5, 4, 0,\n",
            "        5, 6, 6, 8, 1, 7, 6, 3, 7, 9, 9, 8, 4, 6, 9, 5, 9, 2, 5, 0, 4, 8, 4, 1,\n",
            "        9, 0, 2, 3], device='cuda:0')\n",
            "tensor([6, 6, 1, 0, 2, 8, 8, 9, 1, 6, 7, 0, 3, 7, 6, 0, 8, 2, 5, 3, 1, 4, 9, 8,\n",
            "        9, 5, 9, 6, 5, 7, 1, 5, 9, 5, 5, 6, 0, 7, 8, 0, 6, 3, 5, 6, 1, 6, 7, 8,\n",
            "        5, 6, 6, 3, 2, 8, 3, 9, 4, 3, 7, 2, 9, 6, 0, 7, 9, 8, 5, 3, 2, 8, 2, 7,\n",
            "        6, 7, 3, 3, 8, 5, 5, 1, 4, 2, 7, 0, 5, 9, 6, 1, 3, 5, 5, 4, 5, 3, 6, 6,\n",
            "        0, 4, 3, 8], device='cuda:0')\n",
            "tensor([4, 3, 1, 3, 3, 8, 6, 4, 4, 2, 3, 6, 3, 1, 9, 6, 0, 2, 4, 0, 2, 9, 1, 0,\n",
            "        8, 4, 3, 7, 9, 9, 4, 4, 4, 4, 7, 2, 1, 6, 3, 2, 7, 2, 1, 9, 6, 3, 2, 7,\n",
            "        6, 1, 4, 5, 2, 1, 1, 1, 8, 8, 8, 1, 9, 0, 4, 3, 4, 3, 0, 0, 4, 9, 2, 4,\n",
            "        9, 3, 5, 4, 6, 1, 5, 4, 9, 0, 1, 0, 7, 4, 5, 3, 4, 0, 7, 8, 8, 0, 1, 5,\n",
            "        5, 4, 0, 7], device='cuda:0')\n",
            "tensor([7, 0, 9, 7, 7, 7, 0, 6, 0, 2, 3, 3, 6, 5, 9, 6, 2, 9, 4, 5, 4, 9, 5, 9,\n",
            "        9, 2, 6, 4, 3, 3, 9, 9, 3, 9, 2, 8, 1, 5, 8, 0, 2, 9, 5, 6, 2, 2, 1, 5,\n",
            "        3, 3, 9, 5, 2, 4, 0, 4, 4, 4, 6, 2, 7, 9, 0, 2, 7, 5, 3, 1, 2, 1, 0, 1,\n",
            "        6, 1, 0, 7, 5, 1, 1, 8, 7, 3, 8, 8, 4, 6, 7, 1, 9, 7, 5, 0, 5, 9, 8, 5,\n",
            "        2, 2, 4, 2], device='cuda:0')\n",
            "tensor([5, 1, 8, 2, 1, 3, 1, 9, 0, 3, 5, 1, 6, 1, 7, 2, 1, 5, 2, 6, 1, 8, 4, 9,\n",
            "        6, 1, 1, 8, 3, 4, 1, 5, 5, 6, 1, 8, 6, 7, 3, 6, 5, 4, 2, 9, 9, 4, 7, 0,\n",
            "        4, 1, 6, 3, 7, 3, 9, 1, 0, 9, 6, 3, 8, 5, 3, 4, 2, 8, 0, 2, 0, 6, 3, 9,\n",
            "        2, 7, 9, 6, 6, 8, 6, 8, 8, 2, 8, 0, 4, 8, 6, 8, 6, 7, 4, 1, 3, 9, 0, 1,\n",
            "        1, 5, 5, 7], device='cuda:0')\n",
            "tensor([8, 3, 8, 1, 9, 1, 9, 1, 2, 1, 6, 2, 5, 7, 9, 0, 3, 5, 6, 8, 3, 8, 7, 1,\n",
            "        7, 2, 2, 6, 5, 3, 3, 5, 5, 6, 8, 7, 5, 7, 7, 9, 5, 1, 4, 8, 0, 6, 3, 0,\n",
            "        9, 2, 8, 6, 5, 0, 8, 0, 2, 4, 5, 8, 0, 3, 2, 8, 4, 1, 4, 1, 4, 8, 1, 3,\n",
            "        3, 4, 4, 4, 4, 7, 4, 7, 0, 9, 8, 5, 3, 0, 8, 8, 2, 1, 6, 5, 4, 1, 7, 8,\n",
            "        2, 2, 9, 7], device='cuda:0')\n",
            "tensor([2, 7, 5, 8, 2, 3, 5, 2, 8, 6, 9, 0, 6, 9, 1, 6, 0, 3, 4, 8, 3, 7, 5, 2,\n",
            "        4, 3, 2, 8, 6, 3, 3, 7, 6, 4, 0, 3, 6, 4, 3, 9, 4, 8, 7, 0, 6, 1, 5, 5,\n",
            "        6, 7, 6, 1, 0, 1, 0, 8, 8, 5, 0, 4, 3, 5, 0, 7, 1, 8, 9, 1, 2, 3, 9, 8,\n",
            "        7, 5, 3, 4, 0, 7, 8, 7, 0, 4, 7, 3, 0, 8, 8, 8, 8, 6, 0, 8, 6, 6, 6, 6,\n",
            "        6, 7, 5, 5], device='cuda:0')\n",
            "tensor([1, 5, 2, 1, 7, 9, 0, 0, 6, 2, 9, 2, 1, 2, 5, 0, 1, 7, 3, 8, 7, 8, 1, 0,\n",
            "        1, 9, 6, 5, 8, 4, 6, 4, 4, 0, 2, 8, 0, 1, 5, 8, 8, 1, 9, 7, 1, 4, 8, 7,\n",
            "        9, 2, 9, 4, 4, 6, 5, 5, 3, 2, 9, 9, 8, 6, 4, 8, 3, 3, 6, 5, 7, 9, 0, 6,\n",
            "        0, 7, 9, 7, 7, 8, 0, 8, 7, 6, 3, 2, 0, 1, 3, 2, 5, 6, 7, 3, 2, 4, 9, 8,\n",
            "        2, 3, 5, 7], device='cuda:0')\n",
            "tensor([6, 1, 0, 2, 8, 4, 5, 6, 5, 4, 7, 6, 7, 1, 5, 2, 8, 7, 8, 6, 1, 8, 3, 9,\n",
            "        8, 0, 3, 3, 7, 9, 8, 3, 3, 8, 2, 5, 1, 9, 7, 5, 1, 4, 6, 6, 8, 6, 8, 9,\n",
            "        6, 9, 6, 1, 4, 2, 1, 5, 9, 3, 2, 4, 4, 6, 0, 6, 5, 9, 5, 7, 4, 2, 1, 6,\n",
            "        5, 4, 1, 6, 7, 6, 5, 8, 0, 3, 5, 9, 3, 7, 5, 3, 8, 9, 4, 7, 4, 8, 3, 2,\n",
            "        8, 7, 3, 3], device='cuda:0')\n",
            "tensor([4, 4, 5, 8, 0, 6, 6, 8, 1, 9, 4, 2, 7, 7, 9, 0, 9, 1, 5, 0, 6, 9, 0, 8,\n",
            "        4, 5, 3, 0, 4, 1, 9, 6, 3, 4, 5, 2, 2, 2, 3, 8, 9, 2, 8, 3, 8, 2, 2, 6,\n",
            "        9, 8, 6, 4, 0, 8, 3, 7, 7, 9, 6, 9, 1, 0, 4, 4, 2, 6, 3, 2, 0, 8, 3, 6,\n",
            "        1, 8, 5, 1, 2, 5, 5, 6, 7, 4, 8, 0, 3, 4, 7, 1, 4, 2, 0, 8, 3, 0, 1, 8,\n",
            "        0, 8, 6, 0], device='cuda:0')\n",
            "tensor([2, 6, 6, 0, 0, 1, 7, 0, 6, 3, 8, 2, 2, 8, 0, 7, 6, 7, 3, 0, 3, 9, 4, 2,\n",
            "        3, 1, 5, 2, 3, 1, 6, 8, 3, 1, 0, 0, 3, 5, 1, 1, 6, 8, 9, 4, 4, 0, 8, 4,\n",
            "        0, 5, 3, 9, 8, 0, 5, 5, 9, 2, 1, 1, 8, 1, 6, 4, 8, 8, 5, 0, 7, 0, 3, 1,\n",
            "        6, 2, 9, 2, 8, 8, 9, 0, 4, 3, 0, 1, 5, 3, 6, 5, 4, 9, 4, 1, 4, 3, 4, 2,\n",
            "        7, 7, 4, 6], device='cuda:0')\n",
            "tensor([0, 7, 3, 1, 5, 1, 8, 7, 7, 5, 8, 3, 9, 1, 8, 4, 3, 0, 7, 9, 3, 1, 2, 0,\n",
            "        4, 3, 2, 6, 3, 2, 7, 9, 2, 7, 0, 2, 4, 6, 8, 2, 1, 6, 4, 8, 7, 3, 9, 7,\n",
            "        7, 7, 3, 5, 6, 9, 3, 7, 5, 7, 6, 9, 8, 6, 1, 5, 2, 4, 4, 6, 5, 3, 8, 2,\n",
            "        0, 6, 1, 9, 2, 4, 9, 7, 0, 3, 1, 3, 7, 3, 7, 0, 7, 8, 0, 9, 6, 5, 3, 8,\n",
            "        3, 5, 7, 4], device='cuda:0')\n",
            "tensor([6, 0, 5, 3, 1, 4, 5, 5, 0, 8, 6, 0, 8, 3, 5, 2, 1, 7, 6, 7, 5, 1, 9, 7,\n",
            "        5, 9, 8, 3, 1, 5, 5, 5, 9, 9, 7, 2, 7, 9, 5, 1, 1, 4, 2, 0, 3, 7, 7, 8,\n",
            "        0, 9, 0, 4, 1, 6, 9, 7, 8, 0, 9, 7, 9, 2, 9, 7, 1, 4, 3, 0, 6, 3, 7, 8,\n",
            "        7, 7, 6, 1, 7, 9, 8, 5, 8, 3, 2, 5, 8, 5, 9, 9, 0, 1, 1, 4, 0, 9, 0, 8,\n",
            "        5, 3, 1, 5], device='cuda:0')\n",
            "tensor([1, 4, 4, 6, 1, 5, 3, 1, 0, 0, 8, 6, 4, 7, 6, 2, 2, 8, 5, 9, 6, 6, 0, 3,\n",
            "        6, 7, 3, 8, 4, 3, 3, 6, 8, 4, 1, 5, 2, 3, 0, 0, 1, 7, 9, 1, 6, 9, 4, 0,\n",
            "        3, 9, 4, 0, 6, 8, 0, 0, 7, 0, 2, 1, 4, 3, 3, 1, 4, 6, 3, 8, 4, 6, 4, 9,\n",
            "        5, 1, 5, 5, 9, 7, 9, 9, 9, 2, 3, 9, 7, 3, 4, 9, 4, 8, 6, 6, 4, 9, 9, 5,\n",
            "        3, 4, 5, 7], device='cuda:0')\n",
            "tensor([1, 8, 8, 6, 4, 1, 6, 4, 2, 1, 1, 3, 7, 2, 7, 1, 6, 2, 7, 9, 0, 9, 9, 4,\n",
            "        1, 3, 2, 3, 4, 7, 8, 2, 7, 0, 2, 0, 4, 6, 3, 6, 4, 4, 7, 8, 9, 4, 8, 7,\n",
            "        6, 3, 8, 6, 5, 3, 1, 5, 0, 1, 3, 2, 0, 5, 9, 0, 0, 1, 3, 3, 8, 4, 5, 9,\n",
            "        6, 9, 4, 2, 1, 7, 8, 7, 4, 2, 0, 0, 4, 6, 9, 9, 6, 9, 7, 0, 4, 6, 2, 2,\n",
            "        2, 7, 2, 6], device='cuda:0')\n",
            "tensor([3, 0, 6, 6, 3, 3, 6, 1, 3, 1, 5, 1, 9, 6, 2, 4, 4, 2, 8, 3, 4, 4, 8, 3,\n",
            "        3, 7, 7, 2, 5, 2, 5, 1, 6, 7, 1, 3, 4, 2, 8, 9, 5, 0, 8, 0, 3, 2, 8, 1,\n",
            "        1, 2, 5, 0, 6, 5, 3, 0, 9, 0, 5, 1, 7, 1, 5, 9, 8, 4, 0, 6, 9, 8, 8, 3,\n",
            "        3, 7, 0, 8, 3, 7, 3, 7, 9, 5, 0, 0, 1, 6, 9, 7, 9, 1, 2, 4, 5, 6, 5, 8,\n",
            "        8, 9, 2, 1], device='cuda:0')\n",
            "tensor([3, 6, 0, 2, 8, 3, 8, 2, 7, 2, 2, 9, 7, 5, 2, 4, 1, 3, 2, 4, 0, 9, 0, 0,\n",
            "        7, 4, 8, 7, 6, 7, 8, 4, 2, 0, 6, 6, 6, 3, 8, 5, 8, 0, 0, 1, 5, 0, 1, 7,\n",
            "        8, 9, 2, 9, 0, 1, 5, 6, 2, 4, 6, 4, 7, 1, 7, 0, 8, 1, 1, 9, 7, 2, 9, 4,\n",
            "        6, 0, 9, 4, 1, 7, 1, 1, 7, 0, 1, 4, 4, 1, 1, 1, 5, 5, 9, 5, 5, 8, 7, 5,\n",
            "        1, 8, 6, 3], device='cuda:0')\n",
            "tensor([9, 8, 4, 9, 9, 9, 4, 3, 0, 2, 7, 9, 0, 6, 1, 9, 4, 6, 1, 7, 1, 3, 7, 2,\n",
            "        7, 0, 5, 9, 3, 0, 6, 4, 5, 4, 2, 9, 8, 0, 3, 7, 7, 4, 1, 0, 4, 0, 9, 0,\n",
            "        5, 2, 8, 0, 1, 5, 8, 1, 1, 9, 2, 5, 3, 9, 9, 9, 4, 3, 4, 4, 8, 6, 0, 7,\n",
            "        4, 4, 5, 8, 7, 9, 8, 4, 0, 2, 9, 1, 9, 3, 1, 0, 9, 0, 3, 3, 4, 2, 7, 5,\n",
            "        3, 3, 1, 7], device='cuda:0')\n",
            "tensor([4, 7, 8, 8, 6, 6, 5, 8, 8, 6, 8, 8, 5, 4, 0, 9, 5, 2, 5, 8, 4, 2, 7, 1,\n",
            "        1, 3, 1, 0, 0, 0, 8, 6, 1, 3, 8, 1, 4, 9, 0, 1, 8, 8, 0, 1, 3, 8, 4, 7,\n",
            "        0, 5, 1, 7, 4, 2, 3, 1, 2, 0, 2, 3, 5, 3, 7, 7, 8, 4, 0, 6, 5, 3, 9, 8,\n",
            "        7, 2, 0, 5, 1, 5, 7, 5, 7, 9, 5, 0, 5, 0, 9, 4, 1, 6, 4, 0, 1, 4, 4, 4,\n",
            "        0, 9, 2, 2], device='cuda:0')\n",
            "tensor([9, 3, 4, 0, 2, 7, 9, 9, 8, 0, 1, 2, 8, 9, 8, 0, 4, 8, 2, 1, 9, 1, 9, 1,\n",
            "        8, 1, 1, 4, 2, 2, 2, 9, 6, 6, 2, 1, 7, 1, 0, 9, 3, 3, 7, 4, 6, 0, 4, 0,\n",
            "        3, 9, 3, 9, 0, 1, 7, 8, 7, 8, 6, 6, 1, 1, 4, 7, 4, 3, 3, 1, 5, 3, 2, 9,\n",
            "        9, 3, 2, 4, 4, 9, 8, 2, 8, 2, 8, 9, 6, 0, 2, 6, 9, 3, 9, 0, 4, 0, 2, 2,\n",
            "        9, 6, 7, 2], device='cuda:0')\n",
            "tensor([4, 1, 2, 5, 2, 9, 5, 0, 5, 8, 8, 0, 4, 7, 4, 5, 1, 9, 1, 6, 9, 3, 1, 9,\n",
            "        0, 9, 2, 4, 7, 7, 1, 0, 5, 2, 4, 2, 0, 7, 3, 6, 8, 0, 5, 9, 1, 2, 1, 3,\n",
            "        2, 4, 9, 2, 3, 5, 5, 6, 5, 0, 4, 2, 3, 0, 6, 6, 0, 8, 2, 2, 0, 6, 6, 2,\n",
            "        3, 8, 0, 2, 6, 5, 4, 4, 0, 7, 0, 6, 8, 7, 2, 0, 2, 6, 2, 4, 7, 7, 3, 4,\n",
            "        9, 2, 6, 9], device='cuda:0')\n",
            "tensor([1, 2, 4, 1, 9, 2, 5, 0, 9, 3, 0, 8, 3, 0, 0, 7, 6, 9, 2, 5, 7, 8, 0, 7,\n",
            "        2, 5, 8, 2, 3, 6, 4, 9, 8, 7, 0, 4, 5, 9, 8, 2, 5, 8, 0, 9, 0, 0, 8, 3,\n",
            "        4, 4, 2, 3, 7, 5, 7, 6, 5, 9, 6, 1, 1, 9, 7, 4, 7, 2, 1, 0, 5, 9, 6, 2,\n",
            "        6, 8, 7, 5, 2, 6, 5, 2, 4, 5, 4, 4, 8, 0, 6, 2, 1, 7, 6, 4, 7, 8, 2, 1,\n",
            "        4, 4, 7, 3], device='cuda:0')\n",
            "tensor([5, 5, 7, 4, 1, 0, 2, 4, 9, 2, 1, 1, 7, 4, 8, 2, 2, 5, 8, 3, 6, 6, 1, 2,\n",
            "        5, 5, 4, 2, 6, 0, 3, 1, 3, 3, 7, 3, 7, 7, 9, 4, 3, 7, 2, 3, 9, 0, 1, 6,\n",
            "        3, 0, 4, 9, 2, 7, 1, 6, 0, 8, 4, 4, 6, 2, 4, 8, 7, 8, 7, 4, 2, 4, 8, 5,\n",
            "        6, 5, 0, 2, 3, 3, 5, 6, 0, 1, 3, 3, 6, 4, 3, 6, 5, 6, 9, 8, 5, 6, 8, 9,\n",
            "        7, 0, 5, 3], device='cuda:0')\n",
            "tensor([7, 8, 1, 0, 5, 3, 9, 1, 6, 3, 9, 6, 0, 4, 8, 5, 7, 2, 5, 8, 2, 6, 2, 6,\n",
            "        6, 2, 6, 7, 5, 1, 5, 4, 3, 4, 4, 4, 4, 3, 7, 3, 1, 5, 5, 5, 7, 3, 8, 2,\n",
            "        6, 9, 6, 7, 8, 0, 2, 6, 8, 4, 6, 7, 4, 0, 4, 0, 8, 6, 4, 7, 2, 3, 8, 7,\n",
            "        5, 3, 0, 9, 9, 2, 8, 5, 9, 1, 5, 3, 3, 1, 2, 1, 1, 9, 8, 3, 8, 5, 7, 7,\n",
            "        1, 7, 1, 7], device='cuda:0')\n",
            "tensor([7, 3, 6, 8, 5, 5, 6, 5, 8, 0, 9, 4, 8, 8, 2, 1, 2, 8, 2, 3, 9, 9, 2, 7,\n",
            "        1, 3, 0, 7, 3, 0, 0, 3, 3, 6, 8, 5, 5, 0, 0, 8, 8, 0, 6, 7, 2, 2, 0, 1,\n",
            "        2, 0, 3, 6, 1, 1, 8, 2, 1, 3, 6, 1, 7, 7, 1, 7, 3, 6, 2, 4, 8, 1, 7, 5,\n",
            "        1, 9, 3, 5, 9, 0, 6, 5, 8, 5, 7, 6, 0, 4, 6, 5, 3, 8, 2, 2, 5, 8, 3, 9,\n",
            "        4, 4, 9, 5], device='cuda:0')\n",
            "tensor([7, 1, 5, 7, 7, 4, 3, 9, 5, 6, 1, 7, 9, 2, 8, 9, 2, 3, 2, 6, 8, 6, 3, 8,\n",
            "        4, 7, 4, 6, 4, 2, 8, 8, 9, 5, 1, 9, 8, 5, 6, 3, 7, 5, 0, 3, 7, 5, 0, 7,\n",
            "        5, 6, 8, 3, 2, 8, 5, 9, 1, 1, 8, 6, 7, 3, 9, 9, 7, 9, 1, 1, 3, 0, 5, 5,\n",
            "        5, 9, 2, 8, 7, 8, 1, 9, 0, 6, 7, 9, 6, 7, 1, 3, 8, 8, 2, 0, 5, 7, 3, 5,\n",
            "        5, 3, 2, 4], device='cuda:0')\n",
            "tensor([4, 1, 2, 4, 3, 1, 6, 8, 6, 1, 7, 4, 2, 6, 1, 2, 1, 7, 7, 3, 9, 3, 5, 8,\n",
            "        3, 5, 5, 6, 6, 7, 9, 7, 3, 1, 4, 6, 2, 4, 6, 6, 7, 8, 5, 4, 3, 8, 7, 8,\n",
            "        0, 3, 3, 8, 3, 6, 4, 7, 9, 0, 6, 2, 0, 2, 5, 1, 9, 6, 5, 7, 3, 0, 9, 3,\n",
            "        2, 0, 7, 0, 5, 6, 7, 7, 7, 3, 4, 8, 3, 9, 8, 2, 9, 8, 9, 6, 8, 7, 8, 5,\n",
            "        0, 1, 9, 0], device='cuda:0')\n",
            "tensor([4, 4, 7, 4, 2, 0, 9, 1, 3, 6, 8, 7, 8, 3, 7, 1, 7, 7, 1, 2, 5, 4, 9, 8,\n",
            "        4, 4, 6, 7, 6, 3, 3, 5, 4, 8, 9, 6, 3, 7, 4, 7, 6, 1, 3, 4, 2, 8, 9, 0,\n",
            "        3, 9, 5, 5, 7, 4, 8, 1, 8, 7, 8, 9, 1, 0, 0, 0, 4, 9, 4, 5, 5, 6, 1, 1,\n",
            "        1, 4, 4, 3, 6, 1, 9, 4, 4, 2, 7, 1, 1, 2, 2, 9, 8, 2, 1, 2, 0, 4, 1, 7,\n",
            "        3, 4, 7, 3], device='cuda:0')\n",
            "tensor([0, 0, 3, 1, 9, 6, 9, 3, 4, 7, 5, 9, 6, 9, 3, 4, 5, 4, 1, 4, 1, 5, 5, 8,\n",
            "        9, 3, 6, 9, 9, 5, 8, 8, 4, 4, 2, 4, 2, 7, 2, 2, 4, 8, 7, 6, 2, 3, 0, 5,\n",
            "        7, 0, 0, 4, 0, 4, 8, 8, 9, 7, 7, 7, 9, 5, 6, 3, 7, 8, 2, 8, 8, 2, 1, 6,\n",
            "        7, 3, 6, 7, 6, 6, 4, 9, 9, 5, 9, 7, 2, 0, 6, 0, 0, 6, 2, 1, 6, 9, 4, 4,\n",
            "        7, 1, 1, 6], device='cuda:0')\n",
            "tensor([4, 7, 9, 0, 1, 6, 9, 2, 8, 9, 9, 0, 2, 5, 4, 8, 4, 3, 5, 7, 6, 9, 4, 2,\n",
            "        5, 5, 0, 9, 5, 9, 4, 8, 1, 7, 1, 0, 2, 9, 3, 6, 0, 6, 2, 6, 9, 9, 6, 1,\n",
            "        7, 1, 2, 4, 4, 3, 7, 8, 7, 5, 7, 6, 4, 4, 4, 0, 2, 8, 1, 3, 1, 6, 9, 3,\n",
            "        7, 5, 6, 5, 2, 4, 4, 8, 8, 4, 0, 3, 1, 1, 1, 0, 5, 5, 6, 7, 9, 6, 9, 3,\n",
            "        1, 9, 1, 3], device='cuda:0')\n",
            "tensor([3, 4, 6, 9, 7, 8, 8, 1, 6, 1, 4, 0, 6, 2, 7, 3, 9, 6, 7, 9, 4, 0, 7, 5,\n",
            "        3, 6, 0, 6, 0, 0, 6, 1, 1, 9, 3, 2, 0, 5, 3, 5, 7, 8, 6, 6, 0, 4, 2, 3,\n",
            "        3, 2, 0, 6, 5, 1, 3, 6, 9, 2, 2, 4, 6, 4, 1, 3, 0, 6, 9, 3, 7, 6, 1, 7,\n",
            "        1, 2, 7, 4, 2, 1, 7, 8, 6, 9, 9, 1, 2, 9, 1, 5, 5, 6, 0, 7, 2, 8, 5, 9,\n",
            "        0, 3, 7, 1], device='cuda:0')\n",
            "tensor([9, 8, 2, 8, 4, 9, 0, 3, 4, 4, 3, 3, 0, 7, 7, 3, 4, 6, 7, 1, 3, 7, 8, 9,\n",
            "        2, 5, 1, 6, 8, 1, 8, 9, 8, 2, 6, 9, 2, 0, 0, 7, 9, 4, 1, 4, 3, 1, 4, 8,\n",
            "        8, 7, 6, 2, 5, 9, 0, 8, 7, 8, 0, 3, 2, 3, 0, 1, 8, 1, 5, 3, 7, 1, 8, 6,\n",
            "        7, 5, 3, 4, 0, 8, 6, 3, 7, 9, 4, 9, 9, 0, 6, 3, 3, 1, 5, 5, 3, 8, 0, 6,\n",
            "        5, 8, 1, 1], device='cuda:0')\n",
            "tensor([2, 3, 7, 2, 0, 6, 2, 2, 5, 9, 2, 4, 9, 7, 2, 1, 1, 2, 7, 7, 4, 8, 6, 7,\n",
            "        7, 6, 8, 1, 3, 2, 3, 1, 2, 2, 2, 2, 7, 5, 8, 2, 1, 3, 0, 9, 0, 9, 7, 6,\n",
            "        9, 0, 8, 8, 5, 6, 1, 3, 5, 9, 3, 0, 8, 2, 5, 0, 5, 0, 1, 3, 7, 2, 1, 9,\n",
            "        0, 9, 3, 6, 1, 5, 9, 4, 2, 9, 3, 4, 7, 6, 7, 6, 3, 1, 6, 5, 0, 2, 2, 3,\n",
            "        8, 1, 7, 7], device='cuda:0')\n",
            "tensor([7, 9, 3, 4, 8, 5, 8, 1, 2, 3, 1, 2, 2, 7, 0, 3, 5, 5, 5, 1, 9, 6, 2, 1,\n",
            "        9, 6, 1, 5, 9, 2, 9, 8, 6, 1, 9, 9, 3, 8, 2, 5, 3, 8, 2, 6, 9, 1, 3, 5,\n",
            "        4, 1, 8, 5, 4, 8, 7, 4, 4, 0, 3, 0, 6, 5, 4, 5, 4, 6, 8, 5, 6, 7, 7, 3,\n",
            "        0, 9, 8, 1, 7, 0, 5, 0, 8, 1, 4, 2, 5, 9, 3, 2, 4, 5, 1, 4, 5, 1, 4, 4,\n",
            "        4, 1, 5, 6], device='cuda:0')\n",
            "tensor([6, 9, 2, 3, 9, 9, 0, 9, 8, 7, 8, 1, 3, 9, 9, 4, 1, 4, 8, 3, 2, 3, 8, 6,\n",
            "        4, 2, 7, 8, 8, 7, 9, 8, 8, 3, 0, 4, 9, 7, 8, 1, 1, 6, 4, 6, 5, 3, 7, 1,\n",
            "        5, 2, 1, 3, 2, 6, 9, 1, 3, 0, 6, 8, 5, 0, 0, 6, 7, 8, 8, 4, 3, 7, 8, 5,\n",
            "        3, 0, 5, 2, 2, 9, 7, 1, 5, 4, 5, 5, 4, 5, 6, 3, 1, 6, 2, 5, 4, 6, 0, 0,\n",
            "        3, 3, 2, 8], device='cuda:0')\n",
            "tensor([6, 1, 5, 8, 0, 8, 8, 7, 9, 3, 3, 5, 9, 7, 2, 9, 9, 9, 4, 3, 1, 3, 5, 2,\n",
            "        8, 6, 8, 7, 6, 4, 6, 1, 5, 8, 4, 3, 3, 0, 7, 6, 3, 1, 2, 3, 3, 7, 3, 8,\n",
            "        6, 6, 6, 1, 6, 6, 4, 3, 9, 3, 7, 5, 3, 6, 9, 6, 9, 4, 9, 2, 3, 5, 8, 3,\n",
            "        1, 0, 2, 9, 2, 8, 8, 2, 8, 0, 1, 1, 9, 6, 5, 3, 3, 8, 3, 2, 4, 8, 9, 4,\n",
            "        1, 0, 0, 1], device='cuda:0')\n",
            "tensor([6, 3, 3, 4, 0, 4, 7, 1, 1, 3, 5, 3, 3, 5, 6, 2, 9, 5, 7, 2, 8, 8, 5, 1,\n",
            "        6, 1, 0, 8, 7, 2, 8, 0, 8, 4, 5, 5, 6, 2, 5, 4, 9, 0, 5, 6, 7, 9, 9, 2,\n",
            "        3, 1, 7, 4, 5, 7, 1, 5, 8, 8, 1, 4, 6, 4, 9, 1, 1, 8, 3, 6, 1, 6, 3, 3,\n",
            "        0, 2, 3, 3, 4, 2, 0, 2, 9, 8, 5, 4, 7, 2, 1, 9, 7, 0, 5, 2, 5, 2, 7, 0,\n",
            "        1, 0, 0, 7], device='cuda:0')\n",
            "tensor([6, 4, 8, 3, 3, 8, 3, 3, 2, 0, 2, 8, 1, 2, 6, 2, 2, 0, 2, 5, 8, 8, 3, 6,\n",
            "        8, 5, 0, 0, 4, 0, 7, 3, 9, 0, 2, 0, 2, 1, 6, 4, 7, 2, 0, 7, 1, 2, 2, 9,\n",
            "        1, 0, 9, 4, 6, 5, 2, 0, 2, 1, 4, 1, 2, 3, 3, 0, 7, 0, 7, 8, 0, 2, 7, 5,\n",
            "        0, 4, 2, 3, 4, 2, 9, 7, 6, 5, 1, 1, 2, 9, 4, 5, 8, 2, 7, 3, 9, 1, 1, 3,\n",
            "        0, 3, 3, 8], device='cuda:0')\n",
            "tensor([9, 1, 5, 5, 3, 3, 7, 6, 2, 3, 5, 1, 0, 7, 4, 5, 2, 3, 1, 0, 7, 2, 4, 3,\n",
            "        9, 1, 4, 7, 5, 2, 2, 3, 0, 6, 1, 8, 5, 3, 5, 3, 6, 8, 7, 0, 7, 9, 1, 8,\n",
            "        3, 1, 9, 1, 2, 6, 3, 3, 6, 5, 4, 2, 5, 1, 2, 7, 1, 5, 1, 5, 2, 3, 3, 3,\n",
            "        5, 0, 2, 1, 5, 0, 2, 1, 5, 4, 7, 3, 3, 2, 5, 7, 2, 8, 7, 9, 1, 5, 6, 4,\n",
            "        8, 2, 3, 2], device='cuda:0')\n",
            "tensor([7, 9, 2, 5, 8, 2, 1, 1, 9, 9, 6, 4, 9, 8, 5, 3, 4, 9, 8, 6, 4, 4, 6, 8,\n",
            "        4, 6, 0, 6, 7, 9, 6, 3, 7, 6, 2, 7, 4, 6, 5, 2, 8, 7, 7, 6, 5, 2, 6, 2,\n",
            "        9, 4, 2, 8, 2, 2, 1, 0, 8, 1, 9, 6, 0, 3, 9, 7, 8, 1, 5, 3, 1, 4, 2, 1,\n",
            "        2, 4, 5, 0, 8, 9, 8, 7, 6, 5, 5, 6, 2, 9, 0, 3, 3, 8, 7, 7, 0, 0, 4, 1,\n",
            "        6, 0, 6, 2], device='cuda:0')\n",
            "tensor([3, 7, 7, 9, 1, 4, 5, 6, 5, 5, 4, 9, 6, 1, 7, 8, 7, 1, 2, 7, 3, 4, 9, 0,\n",
            "        4, 6, 5, 6, 8, 1, 0, 8, 2, 1, 8, 2, 5, 2, 2, 7, 8, 5, 3, 5, 3, 3, 4, 6,\n",
            "        4, 9, 2, 3, 9, 3, 9, 1, 3, 0, 6, 9, 5, 2, 4, 8, 7, 1, 3, 7, 8, 4, 4, 1,\n",
            "        7, 5, 6, 1, 3, 3, 4, 5, 4, 6, 5, 0, 7, 9, 2, 7, 7, 7, 2, 8, 5, 9, 3, 8,\n",
            "        9, 8, 9, 5], device='cuda:0')\n",
            "tensor([6, 2, 3, 6, 7, 4, 6, 7, 1, 4, 1, 5, 5, 1, 5, 8, 2, 5, 0, 9, 6, 8, 1, 8,\n",
            "        1, 3, 2, 4, 6, 6, 7, 4, 0, 6, 6, 4, 2, 8, 8, 2, 9, 2, 8, 9, 7, 2, 9, 6,\n",
            "        3, 5, 0, 3, 6, 3, 6, 1, 2, 5, 2, 7, 4, 6, 7, 7, 6, 5, 1, 7, 5, 4, 2, 2,\n",
            "        8, 8, 5, 3, 1, 0, 0, 3, 2, 1, 3, 3, 8, 1, 3, 2, 3, 9, 5, 8, 1, 8, 2, 7,\n",
            "        9, 7, 5, 6], device='cuda:0')\n",
            "tensor([2, 2, 3, 1, 3, 6, 2, 1, 8, 0, 4, 9, 7, 1, 0, 0, 0, 7, 5, 8, 4, 3, 2, 7,\n",
            "        6, 0, 3, 2, 9, 7, 1, 2, 3, 7, 9, 9, 2, 4, 7, 4, 6, 8, 9, 5, 0, 4, 7, 2,\n",
            "        9, 5, 5, 0, 6, 3, 3, 0, 2, 7, 1, 4, 1, 6, 8, 5, 0, 2, 2, 9, 4, 0, 9, 0,\n",
            "        6, 9, 6, 5, 6, 0, 1, 3, 4, 1, 8, 4, 5, 7, 8, 7, 4, 3, 0, 8, 2, 4, 1, 3,\n",
            "        6, 7, 8, 8], device='cuda:0')\n",
            "tensor([0, 0, 4, 0, 6, 6, 1, 2, 3, 7, 4, 7, 0, 9, 5, 7, 3, 1, 9, 6, 5, 7, 4, 1,\n",
            "        1, 1, 5, 9, 3, 7, 9, 8, 5, 7, 9, 1, 9, 7, 7, 9, 4, 3, 1, 1, 7, 6, 7, 0,\n",
            "        9, 6, 3, 2, 0, 1, 9, 0, 7, 9, 1, 5, 9, 1, 1, 2, 3, 0, 0, 3, 9, 9, 7, 3,\n",
            "        9, 2, 6, 9, 7, 7, 9, 6, 6, 0, 4, 8, 0, 7, 8, 3, 3, 6, 7, 0, 8, 5, 3, 0,\n",
            "        6, 0, 9, 5], device='cuda:0')\n",
            "tensor([7, 3, 4, 5, 1, 4, 0, 7, 1, 8, 3, 3, 5, 5, 0, 4, 1, 7, 3, 5, 0, 7, 1, 9,\n",
            "        4, 4, 4, 1, 2, 4, 5, 3, 7, 1, 0, 4, 8, 6, 0, 6, 9, 8, 3, 1, 3, 5, 7, 3,\n",
            "        9, 3, 0, 4, 9, 3, 1, 7, 3, 5, 9, 0, 3, 4, 7, 5, 2, 1, 2, 1, 7, 9, 6, 2,\n",
            "        6, 6, 9, 8, 8, 6, 6, 0, 5, 6, 6, 7, 0, 0, 8, 5, 5, 4, 3, 0, 9, 4, 1, 1,\n",
            "        1, 5, 2, 6], device='cuda:0')\n",
            "tensor([0, 7, 5, 0, 0, 7, 2, 9, 5, 1, 5, 1, 5, 7, 0, 1, 9, 8, 4, 1, 2, 0, 7, 8,\n",
            "        1, 9, 9, 2, 7, 7, 0, 9, 2, 8, 7, 8, 3, 6, 7, 1, 3, 2, 2, 5, 3, 1, 3, 1,\n",
            "        9, 8, 9, 0, 0, 0, 1, 6, 8, 8, 6, 5, 0, 7, 0, 4, 8, 8, 8, 1, 5, 4, 3, 2,\n",
            "        5, 2, 5, 6, 6, 7, 3, 8, 2, 0, 0, 4, 0, 5, 2, 4, 0, 4, 9, 6, 1, 9, 3, 8,\n",
            "        9, 3, 4, 8], device='cuda:0')\n",
            "tensor([7, 7, 5, 0, 6, 0, 7, 9, 9, 4, 1, 2, 9, 9, 1, 5, 2, 2, 8, 8, 6, 6, 0, 0,\n",
            "        3, 7, 2, 9, 6, 9, 6, 3, 7, 4, 7, 8, 6, 2, 7, 0, 2, 2, 9, 4, 2, 2, 4, 0,\n",
            "        1, 7, 4, 4, 5, 6, 6, 9, 6, 0, 2, 9, 8, 7, 1, 5, 5, 6, 8, 4, 6, 7, 0, 3,\n",
            "        3, 5, 1, 7, 3, 2, 0, 2, 4, 9, 8, 3, 8, 8, 2, 8, 0, 8, 2, 4, 4, 8, 3, 0,\n",
            "        8, 4, 2, 4], device='cuda:0')\n",
            "tensor([0, 3, 5, 4, 1, 9, 6, 6, 3, 9, 8, 1, 2, 1, 0, 0, 0, 6, 1, 6, 5, 1, 4, 0,\n",
            "        3, 4, 7, 3, 4, 4, 6, 1, 7, 9, 9, 6, 1, 3, 3, 7, 9, 7, 7, 7, 9, 0, 0, 2,\n",
            "        6, 8, 1, 9, 1, 0, 0, 1, 0, 3, 4, 2, 5, 5, 4, 9, 8, 3, 1, 5, 4, 2, 5, 8,\n",
            "        7, 6, 6, 6, 9, 7, 7, 9, 3, 3, 4, 7, 1, 9, 8, 8, 7, 7, 1, 5, 2, 1, 0, 3,\n",
            "        8, 2, 1, 8], device='cuda:0')\n",
            "tensor([4, 0, 3, 1, 6, 7, 4, 4, 2, 3, 7, 3, 0, 3, 1, 3, 7, 9, 9, 1, 4, 2, 4, 5,\n",
            "        1, 7, 6, 0, 4, 1, 9, 2, 6, 2, 4, 9, 9, 6, 9, 6, 3, 7, 3, 5, 5, 0, 8, 2,\n",
            "        1, 2, 2, 1, 5, 4, 0, 0, 9, 9, 6, 0, 7, 0, 3, 8, 3, 4, 6, 8, 4, 3, 4, 0,\n",
            "        1, 6, 3, 5, 8, 3, 2, 4, 2, 4, 8, 6, 9, 9, 2, 6, 8, 2, 3, 9, 2, 0, 6, 9,\n",
            "        0, 6, 6, 0], device='cuda:0')\n",
            "tensor([2, 6, 5, 4, 7, 4, 6, 0, 3, 4, 5, 0, 5, 7, 8, 4, 0, 6, 9, 3, 6, 5, 9, 4,\n",
            "        4, 2, 3, 2, 7, 4, 7, 7, 3, 2, 7, 8, 0, 2, 0, 4, 1, 2, 5, 3, 5, 1, 4, 2,\n",
            "        3, 4, 3, 9, 0, 5, 3, 1, 8, 9, 6, 0, 3, 2, 6, 4, 5, 7, 0, 1, 6, 0, 2, 9,\n",
            "        8, 9, 7, 9, 3, 8, 7, 7, 5, 9, 1, 9, 5, 8, 4, 6, 1, 3, 0, 3, 8, 1, 4, 1,\n",
            "        2, 7, 1, 9], device='cuda:0')\n",
            "tensor([9, 6, 0, 5, 1, 0, 3, 0, 2, 9, 3, 4, 9, 3, 1, 3, 1, 9, 7, 7, 5, 2, 4, 2,\n",
            "        9, 0, 7, 4, 0, 8, 5, 7, 3, 1, 4, 0, 4, 1, 7, 1, 3, 4, 9, 7, 4, 3, 2, 1,\n",
            "        0, 3, 1, 1, 2, 5, 9, 1, 9, 5, 3, 6, 2, 2, 3, 6, 7, 4, 9, 5, 8, 1, 8, 9,\n",
            "        4, 4, 2, 5, 1, 2, 0, 3, 3, 0, 2, 6, 0, 9, 3, 9, 5, 8, 9, 5, 8, 0, 3, 7,\n",
            "        7, 9, 5, 0], device='cuda:0')\n",
            "tensor([7, 7, 7, 7, 9, 2, 7, 0, 0, 9, 5, 9, 3, 5, 7, 7, 6, 5, 8, 6, 4, 3, 4, 1,\n",
            "        7, 7, 9, 3, 5, 9, 6, 4, 6, 1, 4, 2, 1, 5, 9, 5, 6, 1, 1, 4, 1, 4, 3, 4,\n",
            "        4, 3, 7, 3, 7, 9, 0, 5, 3, 9, 0, 4, 2, 6, 7, 8, 8, 3, 0, 9, 8, 2, 9, 4,\n",
            "        3, 1, 8, 4, 7, 1, 7, 5, 1, 5, 9, 5, 5, 8, 7, 5, 3, 4, 9, 6, 4, 3, 4, 6,\n",
            "        8, 0, 8, 3], device='cuda:0')\n",
            "tensor([1, 9, 8, 9, 3, 3, 0, 4, 4, 6, 5, 6, 3, 8, 8, 0, 1, 7, 8, 4, 3, 3, 9, 5,\n",
            "        8, 7, 1, 2, 3, 6, 5, 7, 9, 0, 9, 4, 4, 7, 2, 0, 8, 8, 2, 1, 5, 6, 9, 6,\n",
            "        5, 4, 3, 3, 2, 6, 7, 5, 0, 1, 7, 5, 9, 7, 0, 8, 4, 0, 9, 5, 9, 8, 9, 9,\n",
            "        9, 1, 4, 3, 2, 0, 9, 8, 6, 8, 6, 5, 0, 6, 6, 0, 6, 9, 0, 1, 0, 3, 7, 2,\n",
            "        7, 7, 1, 9], device='cuda:0')\n",
            "tensor([6, 5, 3, 1, 7, 3, 1, 5, 6, 6, 7, 4, 5, 8, 8, 6, 8, 0, 7, 0, 3, 8, 5, 7,\n",
            "        7, 5, 0, 8, 8, 2, 5, 6, 0, 5, 2, 2, 5, 0, 1, 6, 2, 4, 6, 6, 3, 8, 3, 4,\n",
            "        8, 2, 8, 6, 0, 0, 8, 9, 4, 1, 8, 6, 7, 9, 8, 3, 1, 7, 1, 8, 9, 0, 0, 8,\n",
            "        5, 9, 1, 0, 1, 2, 1, 4, 3, 9, 2, 7, 5, 9, 0, 7, 5, 8, 4, 3, 2, 0, 5, 0,\n",
            "        7, 8, 6, 9], device='cuda:0')\n",
            "tensor([0, 6, 3, 7, 0, 8, 8, 7, 0, 8, 7, 3, 3, 9, 1, 0, 4, 7, 9, 8, 4, 0, 2, 5,\n",
            "        6, 5, 8, 8, 6, 2, 1, 7, 0, 9, 6, 4, 6, 7, 1, 0, 1, 7, 1, 4, 0, 8, 1, 1,\n",
            "        2, 8, 9, 9, 0, 6, 4, 3, 1, 0, 0, 4, 4, 2, 5, 3, 6, 4, 8, 0, 7, 9, 2, 4,\n",
            "        2, 7, 9, 2, 0, 5, 6, 0, 7, 9, 7, 1, 8, 2, 3, 7, 8, 7, 7, 5, 2, 5, 9, 3,\n",
            "        6, 5, 6, 1], device='cuda:0')\n",
            "tensor([5, 5, 9, 1, 8, 5, 0, 8, 6, 2, 2, 9, 5, 1, 1, 9, 3, 2, 9, 5, 4, 2, 2, 9,\n",
            "        5, 0, 2, 8, 6, 0, 9, 2, 0, 8, 6, 5, 7, 8, 7, 9, 8, 0, 9, 9, 8, 1, 8, 6,\n",
            "        7, 3, 4, 5, 4, 8, 3, 5, 0, 3, 9, 6, 0, 7, 9, 7, 4, 5, 1, 2, 2, 6, 7, 5,\n",
            "        3, 0, 6, 5, 2, 0, 5, 6, 7, 2, 2, 3, 9, 2, 5, 6, 5, 0, 4, 8, 3, 5, 9, 4,\n",
            "        3, 2, 7, 4], device='cuda:0')\n",
            "tensor([1, 4, 0, 1, 9, 6, 3, 2, 8, 1, 9, 2, 1, 2, 9, 5, 0, 3, 3, 8, 3, 2, 9, 9,\n",
            "        8, 4, 9, 3, 6, 1, 1, 3, 9, 6, 7, 8, 1, 5, 9, 5, 8, 6, 4, 0, 8, 0, 5, 4,\n",
            "        1, 1, 7, 8, 6, 8, 9, 4, 4, 3, 9, 6, 9, 2, 4, 8, 1, 9, 0, 1, 9, 0, 0, 0,\n",
            "        9, 1, 7, 6, 3, 5, 8, 6, 6, 8, 4, 8, 4, 3, 6, 3, 8, 3, 2, 8, 8, 7, 5, 8,\n",
            "        0, 4, 8, 5], device='cuda:0')\n",
            "tensor([7, 0, 8, 7, 9, 6, 1, 5, 7, 9, 5, 0, 0, 4, 4, 1, 9, 5, 7, 0, 1, 3, 8, 4,\n",
            "        5, 1, 5, 9, 7, 8, 5, 8, 8, 6, 0, 4, 5, 2, 9, 9, 0, 6, 1, 3, 2, 3, 4, 4,\n",
            "        2, 5, 4, 2, 1, 8, 1, 5, 9, 2, 8, 0, 7, 0, 6, 0, 3, 6, 9, 4, 0, 1, 1, 0,\n",
            "        1, 2, 2, 8, 9, 0, 5, 5, 0, 4, 8, 7, 1, 4, 5, 8, 6, 7, 2, 2, 6, 2, 4, 6,\n",
            "        4, 3, 8, 6], device='cuda:0')\n",
            "tensor([5, 4, 2, 8, 0, 1, 7, 7, 8, 2, 5, 0, 5, 1, 8, 6, 0, 0, 5, 3, 3, 3, 9, 3,\n",
            "        5, 7, 0, 1, 1, 3, 1, 5, 9, 5, 2, 1, 3, 3, 7, 1, 3, 8, 3, 8, 7, 4, 5, 1,\n",
            "        2, 7, 7, 6, 2, 0, 8, 1, 1, 2, 7, 2, 4, 2, 3, 7, 7, 3, 0, 9, 7, 4, 0, 2,\n",
            "        1, 4, 5, 8, 3, 8, 5, 5, 4, 0, 0, 2, 9, 4, 2, 5, 1, 8, 7, 0, 1, 8, 6, 2,\n",
            "        1, 7, 4, 7], device='cuda:0')\n",
            "tensor([9, 4, 1, 1, 6, 6, 2, 5, 4, 4, 5, 8, 6, 0, 6, 0, 3, 6, 4, 3, 1, 5, 2, 0,\n",
            "        0, 1, 0, 0, 3, 7, 5, 4, 2, 6, 6, 0, 5, 0, 4, 7, 6, 0, 0, 9, 5, 3, 4, 0,\n",
            "        4, 5, 1, 4, 8, 3, 3, 8, 7, 8, 4, 3, 3, 2, 1, 0, 1, 9, 6, 5, 9, 6, 7, 6,\n",
            "        1, 0, 3, 8, 0, 3, 7, 4, 0, 6, 0, 8, 0, 9, 8, 2, 1, 2, 8, 9, 8, 2, 5, 2,\n",
            "        5, 7, 0, 3], device='cuda:0')\n",
            "tensor([3, 0, 4, 5, 0, 1, 3, 6, 7, 3, 7, 7, 8, 6, 0, 1, 9, 2, 0, 5, 7, 2, 0, 2,\n",
            "        1, 4, 0, 3, 5, 5, 6, 9, 7, 3, 9, 9, 2, 5, 6, 5, 2, 4, 7, 0, 5, 2, 1, 9,\n",
            "        0, 5, 6, 5, 8, 7, 1, 5, 6, 6, 2, 8, 4, 9, 4, 5, 1, 3, 0, 2, 1, 3, 3, 4,\n",
            "        6, 5, 4, 9, 1, 8, 5, 0, 2, 4, 8, 3, 9, 3, 0, 5, 6, 2, 5, 8, 5, 1, 7, 2,\n",
            "        7, 1, 7, 1], device='cuda:0')\n",
            "tensor([9, 2, 5, 1, 2, 4, 9, 0, 1, 2, 8, 7, 6, 1, 2, 0, 8, 9, 1, 9, 0, 1, 0, 1,\n",
            "        3, 6, 7, 8, 8, 9, 0, 1, 8, 5, 4, 9, 9, 2, 4, 6, 5, 7, 7, 9, 9, 7, 7, 0,\n",
            "        9, 0, 7, 6, 1, 5, 5, 8, 5, 7, 5, 6, 5, 5, 5, 1, 5, 9, 4, 8, 5, 6, 3, 2,\n",
            "        6, 6, 7, 4, 2, 1, 0, 8, 8, 1, 7, 9, 2, 1, 4, 2, 6, 8, 2, 3, 7, 5, 0, 5,\n",
            "        1, 5, 0, 9], device='cuda:0')\n",
            "tensor([2, 6, 1, 0, 9, 6, 2, 2, 2, 4, 3, 1, 7, 9, 4, 6, 4, 2, 7, 1, 1, 2, 7, 4,\n",
            "        6, 8, 7, 2, 2, 6, 0, 7, 5, 0, 0, 2, 2, 5, 8, 6, 0, 8, 1, 6, 9, 4, 1, 4,\n",
            "        3, 6, 7, 2, 8, 6, 6, 4, 1, 1, 7, 5, 6, 2, 5, 9, 0, 9, 8, 7, 6, 6, 6, 1,\n",
            "        1, 1, 8, 1, 4, 8, 9, 7, 2, 7, 8, 6, 1, 8, 6, 0, 6, 8, 3, 8, 5, 5, 8, 7,\n",
            "        8, 2, 8, 6], device='cuda:0')\n",
            "tensor([5, 1, 5, 2, 3, 4, 8, 3, 6, 1, 8, 2, 7, 4, 7, 8, 2, 8, 6, 4, 3, 4, 2, 1,\n",
            "        6, 1, 5, 3, 4, 2, 5, 2, 9, 3, 7, 9, 2, 2, 4, 6, 0, 2, 7, 6, 1, 4, 7, 5,\n",
            "        8, 8, 4, 3, 3, 4, 8, 5, 0, 3, 5, 0, 3, 1, 7, 5, 5, 2, 7, 9, 9, 0, 9, 2,\n",
            "        6, 3, 6, 2, 1, 9, 8, 1, 5, 4, 3, 2, 2, 5, 7, 3, 4, 5, 9, 4, 7, 1, 5, 0,\n",
            "        4, 3, 0, 0], device='cuda:0')\n",
            "tensor([9, 1, 2, 8, 6, 8, 1, 1, 7, 5, 9, 8, 2, 3, 1, 4, 9, 7, 6, 6, 8, 2, 5, 1,\n",
            "        1, 0, 2, 1, 6, 2, 2, 7, 1, 5, 7, 6, 7, 6, 0, 2, 4, 3, 6, 9, 9, 7, 7, 1,\n",
            "        0, 6, 0, 2, 9, 0, 8, 3, 5, 5, 7, 0, 0, 9, 5, 6, 9, 4, 8, 5, 4, 3, 1, 9,\n",
            "        8, 4, 1, 7, 8, 8, 4, 9, 6, 8, 2, 1, 0, 9, 2, 8, 4, 3, 4, 2, 8, 6, 2, 1,\n",
            "        4, 3, 7, 8], device='cuda:0')\n",
            "tensor([9, 7, 5, 3, 7, 9, 2, 2, 1, 4, 2, 8, 2, 7, 7, 9, 0, 7, 8, 0, 4, 7, 0, 7,\n",
            "        2, 6, 1, 6, 3, 1, 9, 1, 4, 0, 0, 5, 0, 1, 6, 8, 9, 4, 4, 1, 2, 2, 6, 9,\n",
            "        7, 5, 7, 0, 5, 7, 0, 0, 4, 8, 3, 2, 0, 1, 1, 0, 4, 5, 2, 4, 9, 9, 8, 8,\n",
            "        0, 7, 8, 8, 8, 5, 1, 3, 6, 5, 3, 6, 0, 4, 5, 2, 2, 1, 6, 6, 2, 7, 9, 2,\n",
            "        0, 0, 2, 1], device='cuda:0')\n",
            "tensor([7, 5, 5, 6, 6, 6, 0, 4, 0, 1, 2, 7, 5, 0, 9, 0, 7, 1, 6, 5, 2, 4, 7, 5,\n",
            "        0, 5, 9, 3, 1, 0, 5, 8, 7, 8, 1, 1, 5, 5, 5, 7, 7, 9, 8, 8, 2, 4, 9, 6,\n",
            "        7, 3, 6, 7, 7, 3, 5, 4, 3, 0, 4, 8, 0, 0, 8, 2, 7, 7, 2, 8, 1, 4, 2, 2,\n",
            "        3, 8, 2, 8, 5, 2, 4, 9, 1, 7, 5, 9, 4, 5, 5, 1, 4, 1, 2, 0, 2, 4, 2, 4,\n",
            "        7, 4, 7, 1], device='cuda:0')\n",
            "tensor([2, 7, 3, 4, 5, 3, 8, 7, 9, 8, 8, 1, 5, 5, 4, 3, 4, 7, 9, 0, 6, 4, 3, 3,\n",
            "        9, 6, 6, 7, 1, 6, 4, 8, 1, 2, 7, 0, 5, 0, 2, 6, 3, 1, 0, 5, 7, 5, 9, 8,\n",
            "        3, 8, 4, 3, 9, 1, 0, 1, 7, 2, 1, 7, 4, 4, 8, 2, 8, 7, 7, 0, 0, 0, 8, 4,\n",
            "        2, 2, 2, 7, 5, 8, 4, 8, 4, 2, 2, 7, 0, 0, 8, 7, 9, 2, 0, 3, 0, 3, 7, 1,\n",
            "        6, 2, 8, 3], device='cuda:0')\n",
            "tensor([0, 1, 2, 9, 7, 7, 7, 8, 1, 9, 9, 6, 6, 8, 9, 0, 7, 3, 6, 3, 3, 2, 5, 6,\n",
            "        4, 3, 0, 6, 7, 8, 3, 9, 4, 3, 0, 3, 0, 0, 5, 0, 4, 7, 1, 2, 0, 2, 8, 7,\n",
            "        7, 4, 0, 9, 9, 0, 7, 1, 4, 9, 2, 0, 4, 8, 5, 6, 3, 6, 1, 5, 6, 0, 5, 6,\n",
            "        0, 1, 1, 6, 3, 0, 3, 3, 0, 5, 7, 4, 2, 0, 2, 3, 0, 0, 1, 4, 4, 4, 6, 2,\n",
            "        4, 8, 9, 2], device='cuda:0')\n",
            "tensor([5, 7, 1, 7, 6, 5, 4, 5, 9, 3, 1, 9, 5, 9, 7, 2, 1, 7, 4, 8, 9, 3, 2, 0,\n",
            "        5, 1, 2, 4, 1, 0, 4, 8, 2, 5, 3, 4, 7, 1, 8, 1, 7, 1, 8, 0, 4, 6, 7, 0,\n",
            "        6, 5, 3, 4, 0, 5, 8, 6, 4, 4, 6, 7, 9, 1, 1, 1, 1, 5, 0, 6, 1, 6, 0, 5,\n",
            "        5, 0, 1, 5, 3, 9, 0, 5, 6, 4, 6, 5, 3, 9, 9, 2, 0, 9, 8, 9, 4, 5, 2, 5,\n",
            "        8, 4, 4, 8], device='cuda:0')\n",
            "tensor([8, 9, 3, 7, 9, 7, 1, 1, 2, 0, 9, 2, 9, 6, 5, 7, 7, 9, 8, 2, 2, 9, 5, 2,\n",
            "        4, 7, 9, 2, 8, 8, 9, 7, 7, 1, 0, 3, 5, 8, 5, 4, 9, 9, 7, 4, 5, 4, 8, 9,\n",
            "        3, 7, 7, 8, 9, 1, 2, 4, 8, 9, 4, 4, 7, 6, 2, 2, 4, 3, 4, 5, 0, 8, 5, 9,\n",
            "        2, 0, 5, 0, 8, 8, 7, 2, 7, 4, 5, 5, 5, 0, 3, 6, 7, 9, 7, 9, 4, 8, 0, 0,\n",
            "        6, 8, 8, 1], device='cuda:0')\n",
            "Test Accuracy of the model on the 10000 test images: 97.59 %\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MuT7ARrTdiMf"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-rDqCjJpPTtE"
      },
      "source": [
        "print Confusion Matrix(예정)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tMKMi1iPzzgX"
      },
      "source": [
        "# # main\n",
        "\n",
        "# # For fold results\n",
        "# results = {}\n",
        "  \n",
        "# # Set fixed random number seed\n",
        "# torch.manual_seed(1576 - 1485)\n",
        "\n",
        "# # Define the K-fold Cross Validator\n",
        "# kfold = KFold(n_splits=k_folds, shuffle=True)\n",
        "  \n",
        "# # Start print\n",
        "# print('--------------------------------')\n",
        "# # K-fold Cross Validation model evaluation\n",
        "# for fold, (train_ids, valid_ids) in enumerate(kfold.split(train_data)):\n",
        "  \n",
        "#   # Print\n",
        "#   print(f'FOLD {fold+1}')\n",
        "#   print('--------------------------------')\n",
        "  \n",
        "#   # Sample elements randomly from a given list of ids, no replacement.\n",
        "#   train_subsampler = torch.utils.data.SubsetRandomSampler(train_ids)\n",
        "#   valid_subsampler = torch.utils.data.SubsetRandomSampler(valid_ids)\n",
        "  \n",
        "#   # Define data loaders for training and testing data in this fold\n",
        "#   train_loader = torch.utils.data.DataLoader(\n",
        "#                     train_data, \n",
        "#                     batch_size=batch_size, sampler=train_subsampler)\n",
        "#   valid_loader = torch.utils.data.DataLoader(\n",
        "#                     valid_data,\n",
        "#                     batch_size=batch_size, sampler=valid_subsampler)\n",
        "    \n",
        "#     # Init the neural network\n",
        "#   model = FashionNet().to(device)\n",
        "#   criterion = nn.CrossEntropyLoss()\n",
        "#   optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\n",
        "\n",
        "#   model, optimizer, (train_losses, valid_losses, train_acc_list, valid_acc_list) = training_loop(model, criterion, optimizer, train_loader, valid_loader, num_epochs, device, print_interval=10) \n",
        "\n",
        "#   plot_losses(fold, train_losses, valid_losses, learning_rate, num_epochs, batch_size)\n",
        "#   plot_acc(fold, train_acc_list, valid_acc_list, learning_rate, num_epochs, batch_size)\n",
        "\n",
        "#   # Print about testing\n",
        "#   print('Starting testing')\n",
        "  \n",
        "#   # Saving the model\n",
        "#   save_path = f'./model-fold-{fold+1}.pth'\n",
        "#   torch.save(model.state_dict(), save_path)\n",
        "\n",
        "#   # Evaluationfor this fold\n",
        "#   _, loss, accuracy = validate(valid_loader, model, criterion, device)\n",
        "\n",
        "#   # Print accuracy\n",
        "#   print('Accuracy for fold %d: %d %%' % (fold+1, accuracy))\n",
        "#   print('--------------------------------')\n",
        "#   results[fold] = accuracy\n",
        "  \n",
        "# # Print fold results\n",
        "# print(f'K-FOLD CROSS VALIDATION RESULTS FOR {k_folds} FOLDS')\n",
        "# print('--------------------------------')\n",
        "# sum = 0.0\n",
        "# for key, value in results.items():\n",
        "#   print(f'Fold {key+1}: {value} %')\n",
        "#   sum += value\n",
        "# print(f'Average: {sum/len(results.items())} %')"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}